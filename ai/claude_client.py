"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API
"""

import asyncio
import logging
from typing import List, Optional, Dict, Any
import anthropic

logger = logging.getLogger(__name__)

class ClaudeClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API"""
    
    def __init__(self, config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config = config
        self.claude_config = config.get('claude', {})
        self.prompts = config.get('prompts', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = self.claude_config.get('api_key')
        if not api_key or api_key == 'your_claude_api_key_here':
            logger.warning("Claude API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É")
            self.client = None
        else:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic –∫–ª–∏–µ–Ω—Ç–∞
                self.client = anthropic.AsyncAnthropic(api_key=api_key)
                logger.info("Claude API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude API: {e}")
                self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.model = self.claude_config.get('model', 'claude-3-5-sonnet-20241022')
        self.max_tokens = self.claude_config.get('max_tokens', 1000)
        self.temperature = self.claude_config.get('temperature', 0.7)
        
        logger.info(f"Claude –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: model={self.model}, api_available={bool(self.client)}")

    async def _make_request(self, prompt: str, max_tokens: Optional[int] = None) -> str:
        """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Claude API"""
        if not self.client:
            return ""
        
        try:
            response = await self.client.messages.create(
                model=self.model,
                max_tokens=max_tokens or self.max_tokens,
                temperature=self.temperature,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            
            content = response.content[0].text if response.content else ""
            return content.strip()
            
        except anthropic.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Claude API: {e}")
            return ""
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Claude: {e}")
            return ""

    async def analyze_user_interest(self, message: str, context: List[str] = None) -> int:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä –æ—Ç 0 –¥–æ 100
        """
        if self.client:
            try:
                context_str = ""
                if context:
                    context_str = "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(context[-3:])
                
                prompt = self.prompts.get('analyze_interest', '').format(
                    message=message,
                    context=context_str
                )
                
                if prompt:
                    response = await self._make_request(prompt, max_tokens=10)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    score_text = ''.join(filter(str.isdigit, response))
                    if score_text:
                        score = int(score_text)
                        return max(0, min(100, score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {e}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI
        return self._analyze_interest_simple(message)

    def _analyze_interest_simple(self, message: str) -> int:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ AI"""
        message_lower = message.lower()
        
        # –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        high_interest_words = [
            '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', 
            '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å',
            '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ü–µ–Ω–∞', '–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å'
        ]
        
        # –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        medium_interest_words = [
            '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–¥–æ–π–¥–µ—Ç', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', 
            '–≤–æ–∑–º–æ–∂–Ω–æ', '—Ä–∞—Å—Å–º–æ—Ç—Ä—é', '–¥—É–º–∞—é', '—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
            '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ', '—É—Å–ª–æ–≤–∏—è'
        ]
        
        # –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        low_interest_words = [
            '–¥–æ—Ä–æ–≥–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–ø–∞–º', '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è',
            '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '—Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        for word in high_interest_words:
            if word in message_lower:
                return 85
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        for word in medium_interest_words:
            if word in message_lower:
                return 60
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        for word in low_interest_words:
            if word in message_lower:
                return 20
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ - —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        question_words = ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '?']
        for word in question_words:
            if word in message_lower:
                return 50
        
        return 40  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def generate_response(self, message: str, context: List[str] = None, interest_score: int = 0) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if self.client:
            try:
                context_str = ""
                if context:
                    context_str = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:\n" + "\n".join(context[-5:])
                
                prompt = self.prompts.get('generate_response', '').format(
                    message=message,
                    context=context_str,
                    interest_score=interest_score
                )
                
                if prompt:
                    response = await self._make_request(prompt, max_tokens=self.max_tokens)
                    if response:
                        return response
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ AI
        return self._generate_response_simple(message, interest_score)

    def _generate_response_simple(self, message: str, interest_score: int) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ AI"""
        message_lower = message.lower()
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (70+)
        if interest_score >= 70:
            if any(word in message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
                return "–û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ü–µ–Ω –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π! üìû"
            elif any(word in message_lower for word in ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å']):
                return "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ì–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º. –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéØ"
            else:
                return "–í–∏–∂—É, —á—Ç–æ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏ - –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å! ‚≠ê"
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (40-69)
        elif interest_score >= 40:
            if '?' in message:
                return "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏ - –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. üòä"
            else:
                return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üëç"
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞ (–º–µ–Ω–µ–µ 40)
        else:
            if any(word in message_lower for word in ['–¥–æ—Ä–æ–≥–æ', '–Ω–µ –Ω—É–∂–Ω–æ']):
                return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–∞—Å –Ω–∞–π–¥–µ—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üí≠"
            else:
                return "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è! ü§ù"

    async def analyze_potential_lead(self, message: str, channel: str) -> int:
        """
        –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä –æ—Ç 0 –¥–æ 100
        """
        if self.client:
            try:
                prompt = self.prompts.get('analyze_lead', '').format(
                    message=message,
                    channel=channel
                )
                
                if prompt:
                    response = await self._make_request(prompt, max_tokens=10)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    score_text = ''.join(filter(str.isdigit, response))
                    if score_text:
                        score = int(score_text)
                        return max(0, min(100, score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–∞: {e}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–∞ –±–µ–∑ AI
        return self._analyze_lead_simple(message)

    def _analyze_lead_simple(self, message: str) -> int:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–∞ –±–µ–∑ AI"""
        message_lower = message.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
        business_words = [
            'crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–±–∏–∑–Ω–µ—Å', '–ø—Ä–æ–¥–∞–∂–∏', '–∫–ª–∏–µ–Ω—Ç—ã', 
            '–∑–∞—è–≤–∫–∏', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '—Å–∏—Å—Ç–µ–º–∞', 'telegram bot', '–±–æ—Ç',
            '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–æ–Ω–ª–∞–π–Ω', '—Å–∞–π—Ç', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥'
        ]
        
        # –ü—Ä–æ–±–ª–µ–º—ã –±–∏–∑–Ω–µ—Å–∞
        problem_words = [
            '–Ω–µ —É—Å–ø–µ–≤–∞–µ–º', '–º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫', '–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', '–∏—â—É —Ä–µ—à–µ–Ω–∏–µ',
            '–∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
            '—É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏', '–ø—Ä–∏–≤–ª–µ—á—å –∫–ª–∏–µ–Ω—Ç–æ–≤'
        ]
        
        # –ù–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        intent_words = [
            '–∏—â—É', '–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '–ø–ª–∞–Ω–∏—Ä—É—é',
            '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é', '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'
        ]
        
        score = 0
        
        # +30 –∑–∞ –∫–∞–∂–¥–æ–µ –±–∏–∑–Ω–µ—Å-—Å–ª–æ–≤–æ
        for word in business_words:
            if word in message_lower:
                score += 30
                break  # –ß—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–ª–ª–æ–≤
        
        # +40 –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–∏–∑–Ω–µ—Å–∞
        for word in problem_words:
            if word in message_lower:
                score += 40
                break
        
        # +30 –∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        for word in intent_words:
            if word in message_lower:
                score += 30
                break
        
        return min(100, score)

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Claude API"""
        if not self.client:
            return True  # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        try:
            response = await self._make_request("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞—é", max_tokens=10)
            return bool(response and len(response) > 0)
        except Exception as e:
            logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Claude API failed: {e}")
            return False

    def get_usage_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            "model": self.model,
            "max_tokens": self.max_tokens,
            "temperature": self.temperature,
            "api_available": bool(self.client),
            "status": "ai_mode" if self.client else "simple_mode"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
claude_client: Optional[ClaudeClient] = None

def init_claude_client(config: Dict[str, Any]) -> ClaudeClient:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Claude"""
    global claude_client
    try:
        claude_client = ClaudeClient(config)
        logger.info("–ì–ª–æ–±–∞–ª—å–Ω—ã–π Claude –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return claude_client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Claude –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
        claude_client = ClaudeClient({'claude': {'api_key': ''}, 'prompts': {}})
        return claude_client

def get_claude_client() -> Optional[ClaudeClient]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Claude"""
    global claude_client
    if claude_client is None:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        claude_client = ClaudeClient({'claude': {'api_key': ''}, 'prompts': {}})
    return claude_client