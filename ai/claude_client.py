"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API
"""

import asyncio
import logging
from typing import List, Optional, Dict, Any
import anthropic

logger = logging.getLogger(__name__)

class ClaudeClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API"""
    
    def __init__(self, config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config = config
        self.claude_config = config.get('claude', {})
        self.prompts = config.get('prompts', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = self.claude_config.get('api_key')
        if not api_key:
            logger.warning("Claude API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º")
            self.client = None
        else:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic –∫–ª–∏–µ–Ω—Ç–∞
                self.client = anthropic.AsyncAnthropic(api_key=api_key)
                logger.info("Claude API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Claude API: {e}")
                self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.model = self.claude_config.get('model', 'claude-3-5-sonnet-20241022')
        self.max_tokens = self.claude_config.get('max_tokens', 1000)
        self.temperature = self.claude_config.get('temperature', 0.7)
        
        logger.info(f"Claude –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: model={self.model}, api_available={bool(self.client)}")

    async def _make_request(self, prompt: str, max_tokens: Optional[int] = None) -> str:
        """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Claude API"""
        if not self.client:
            logger.warning("Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –æ—Ç–≤–µ—Ç")
            return "–î–µ–º–æ –æ—Ç–≤–µ—Ç –æ—Ç AI"
        
        try:
            response = await self.client.messages.create(
                model=self.model,
                max_tokens=max_tokens or self.max_tokens,
                temperature=self.temperature,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            
            content = response.content[0].text if response.content else ""
            return content.strip()
            
        except anthropic.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Claude API: {e}")
            return self._get_fallback_response(prompt)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Claude: {e}")
            return self._get_fallback_response(prompt)

    def _get_fallback_response(self, prompt: str) -> str:
        """Fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        if "analyze_interest" in prompt.lower():
            return "50"  # –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        elif "analyze_lead" in prompt.lower():
            return "60"  # –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –¥–ª—è –ª–∏–¥–∞
        else:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

    async def analyze_user_interest(self, message: str, context: List[str] = None) -> int:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä –æ—Ç 0 –¥–æ 100
        """
        try:
            context_str = ""
            if context:
                context_str = "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(context[-3:])
            
            prompt = self.prompts.get('analyze_interest', '').format(
                message=message,
                context=context_str
            )
            
            if not prompt:
                logger.warning("–ü—Ä–æ–º–ø—Ç analyze_interest –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return self._analyze_interest_simple(message)
            
            response = await self._make_request(prompt, max_tokens=10)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            score_text = ''.join(filter(str.isdigit, response))
            if score_text:
                score = int(score_text)
                return max(0, min(100, score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100
            else:
                return self._analyze_interest_simple(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {e}")
            return self._analyze_interest_simple(message)

    def _analyze_interest_simple(self, message: str) -> int:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ AI"""
        message_lower = message.lower()
        
        # –í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        high_interest_words = ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', 
                              '–≥–¥–µ –∫—É–ø–∏—Ç—å', '–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–Ω—É–∂–Ω–æ']
        
        # –°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        medium_interest_words = ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–¥–æ–π–¥–µ—Ç', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', 
                               '–≤–æ–∑–º–æ–∂–Ω–æ', '—Ä–∞—Å—Å–º–æ—Ç—Ä—é', '–¥—É–º–∞—é']
        
        # –ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å
        low_interest_words = ['–¥–æ—Ä–æ–≥–æ', '–Ω–µ –Ω—É–∂–Ω–æ', '–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Å–ø–∞–º', '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è']
        
        for word in high_interest_words:
            if word in message_lower:
                return 85
        
        for word in medium_interest_words:
            if word in message_lower:
                return 60
        
        for word in low_interest_words:
            if word in message_lower:
                return 20
        
        return 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async def generate_response(self, message: str, context: List[str] = None, interest_score: int = 0) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            context_str = ""
            if context:
                context_str = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:\n" + "\n".join(context[-5:])
            
            prompt = self.prompts.get('generate_response', '').format(
                message=message,
                context=context_str,
                interest_score=interest_score
            )
            
            if not prompt:
                logger.warning("–ü—Ä–æ–º–ø—Ç generate_response –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return self._generate_response_simple(message, interest_score)
            
            response = await self._make_request(prompt, max_tokens=self.max_tokens)
            
            if response and response != "–î–µ–º–æ –æ—Ç–≤–µ—Ç –æ—Ç AI":
                return response
            else:
                return self._generate_response_simple(message, interest_score)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._generate_response_simple(message, interest_score)

    def _generate_response_simple(self, message: str, interest_score: int) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ AI"""
        message_lower = message.lower()
        
        if interest_score >= 70:
            if any(word in message_lower for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']):
                return "–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∏–∂—É, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ü–µ–Ω –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. üìû"
            else:
                return "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–∏–∂—É, —á—Ç–æ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏ - –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üéØ"
        elif interest_score >= 40:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —è –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å. üòä"
        else:
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å. üëç"

    async def analyze_potential_lead(self, message: str, channel: str) -> int:
        """
        –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä –æ—Ç 0 –¥–æ 100
        """
        try:
            prompt = self.prompts.get('analyze_lead', '').format(
                message=message,
                channel=channel
            )
            
            if not prompt:
                logger.warning("–ü—Ä–æ–º–ø—Ç analyze_lead –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return self._analyze_lead_simple(message)
            
            response = await self._make_request(prompt, max_tokens=10)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            score_text = ''.join(filter(str.isdigit, response))
            if score_text:
                score = int(score_text)
                return max(0, min(100, score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100
            else:
                return self._analyze_lead_simple(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–¥–∞: {e}")
            return self._analyze_lead_simple(message)

    def _analyze_lead_simple(self, message: str) -> int:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ª–∏–¥–∞ –±–µ–∑ AI"""
        message_lower = message.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
        business_words = ['crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–±–∏–∑–Ω–µ—Å', '–ø—Ä–æ–¥–∞–∂–∏', '–∫–ª–∏–µ–Ω—Ç—ã', 
                         '–∑–∞—è–≤–∫–∏', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '—Å–∏—Å—Ç–µ–º–∞', 'telegram bot', '–±–æ—Ç']
        
        # –ü—Ä–æ–±–ª–µ–º—ã –±–∏–∑–Ω–µ—Å–∞
        problem_words = ['–Ω–µ —É—Å–ø–µ–≤–∞–µ–º', '–º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫', '–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', '–∏—â—É —Ä–µ—à–µ–Ω–∏–µ',
                        '–∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
        
        score = 0
        for word in business_words:
            if word in message_lower:
                score += 30
        
        for word in problem_words:
            if word in message_lower:
                score += 40
        
        return min(100, score)

    async def batch_analyze_messages(self, messages: List[Dict[str, str]]) -> List[int]:
        """
        –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        tasks = []
        for msg_data in messages:
            if msg_data.get('type') == 'user':
                task = self.analyze_user_interest(
                    msg_data['text'], 
                    msg_data.get('context', [])
                )
            elif msg_data.get('type') == 'lead':
                task = self.analyze_potential_lead(
                    msg_data['text'],
                    msg_data.get('channel', '')
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0
                async def zero_coro():
                    return 0
                task = zero_coro()
            
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        results = []
        batch_size = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        for i in range(0, len(tasks), batch_size):
            batch = tasks[i:i + batch_size]
            batch_results = await asyncio.gather(*batch, return_exceptions=True)
            
            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {result}")
                    results.append(0)
                else:
                    results.append(result)
        
        return results

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Claude API"""
        if not self.client:
            return False
        
        try:
            response = await self._make_request("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞—é", max_tokens=10)
            return bool(response and len(response) > 0 and response != "–î–µ–º–æ –æ—Ç–≤–µ—Ç –æ—Ç AI")
        except Exception as e:
            logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Claude API failed: {e}")
            return False

    def update_prompts(self, new_prompts: Dict[str, str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        self.prompts.update(new_prompts)
        logger.info("–ü—Ä–æ–º–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def get_usage_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        return {
            "model": self.model,
            "max_tokens": self.max_tokens,
            "temperature": self.temperature,
            "api_available": bool(self.client),
            "status": "active" if self.client else "demo_mode"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
claude_client: Optional[ClaudeClient] = None

def init_claude_client(config: Dict[str, Any]) -> ClaudeClient:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Claude"""
    global claude_client
    try:
        claude_client = ClaudeClient(config)
        logger.info("–ì–ª–æ–±–∞–ª—å–Ω—ã–π Claude –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return claude_client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Claude –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        claude_client = None
        return None

def get_claude_client() -> Optional[ClaudeClient]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Claude"""
    return claude_client