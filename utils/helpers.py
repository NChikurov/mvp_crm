"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è AI-CRM –±–æ—Ç–∞
"""

import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from functools import wraps

logger = logging.getLogger(__name__)

def format_datetime(dt: datetime, format_type: str = "short") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if not dt:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if format_type == "short":
        return dt.strftime("%d.%m %H:%M")
    elif format_type == "date":
        return dt.strftime("%d.%m.%Y")
    elif format_type == "time":
        return dt.strftime("%H:%M")
    elif format_type == "full":
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    else:
        return dt.strftime("%d.%m.%Y %H:%M")

def time_ago(dt: datetime) -> str:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"""
    if not dt:
        return "–Ω–∏–∫–æ–≥–¥–∞"
    
    now = datetime.now()
    diff = now - dt
    
    if diff.days > 30:
        return f"{diff.days // 30} –º–µ—Å. –Ω–∞–∑–∞–¥"
    elif diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        return f"{diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        return f"{diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"

def clean_username(username: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ username –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not username:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.replace("@", "")
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    username = re.sub(r'[^a-zA-Z0-9_]', '', username)
    
    return username

def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if not text:
        return ""
    
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix

def extract_numbers(text: str) -> List[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    numbers = re.findall(r'\d+', text)
    return [int(num) for num in numbers]

def sanitize_html(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if not text:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace("<", "&lt;")
    text = text.replace(">", "&gt;")
    text = text.replace("&", "&amp;")
    
    return text

def format_score_emoji(score: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ —Å–∫–æ—Ä—É –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
    if score >= 90:
        return "üî•"  # –û—á–µ–Ω—å –≥–æ—Ä—è—á–∏–π –ª–∏–¥
    elif score >= 80:
        return "üå∂Ô∏è"  # –ì–æ—Ä—è—á–∏–π –ª–∏–¥
    elif score >= 70:
        return "‚≠ê"  # –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π
    elif score >= 50:
        return "üëç"  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π
    elif score >= 30:
        return "üòê"  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
    else:
        return "‚ùÑÔ∏è"  # –•–æ–ª–æ–¥–Ω—ã–π

def format_user_info(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    name = user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    username = user_data.get('username')
    score = user_data.get('interest_score', 0)
    
    info = f"{format_score_emoji(score)} {name}"
    
    if username:
        info += f" (@{username})"
    
    info += f" - {score}/100"
    
    return info

def validate_telegram_username(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Telegram username"""
    if not username:
        return False
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.replace("@", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
    pattern = r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$'
    return bool(re.match(pattern, username))

def rate_limit(max_calls: int, period: int):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
    calls = []
    
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            now = datetime.now()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
            calls[:] = [call_time for call_time in calls if now - call_time < timedelta(seconds=period)]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if len(calls) >= max_calls:
                logger.warning(f"Rate limit exceeded for {func.__name__}")
                raise Exception(f"Rate limit exceeded: {max_calls} calls per {period} seconds")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–∑–æ–≤
            calls.append(now)
            
            return await func(*args, **kwargs)
        
        return wrapper
    return decorator

async def retry_on_error(func, max_retries: int = 3, delay: float = 1.0):
    """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    for attempt in range(max_retries):
        try:
            return await func()
        except Exception as e:
            if attempt == max_retries - 1:
                logger.error(f"Failed after {max_retries} attempts: {e}")
                raise
            
            logger.warning(f"Attempt {attempt + 1} failed: {e}, retrying in {delay}s")
            await asyncio.sleep(delay)
            delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

def chunk_list(lst: List, chunk_size: int) -> List[List]:
    """–†–∞–∑–±–∏–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏"""
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]

def safe_int(value: Any, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
    try:
        return int(value)
    except (ValueError, TypeError):
        return default

def safe_float(value: Any, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        return float(value)
    except (ValueError, TypeError):
        return default

def generate_user_context(messages: List[Dict[str, Any]], max_messages: int = 5) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not messages:
        return ""
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    recent_messages = messages[-max_messages:]
    
    context_parts = []
    for msg in recent_messages:
        text = msg.get('text', '')
        if text:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = truncate_text(text, 150)
            context_parts.append(f"- {text}")
    
    return "\n".join(context_parts)

def calculate_conversion_rate(converted: int, total: int) -> float:
    """–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    if total == 0:
        return 0.0
    return (converted / total) * 100

def format_large_number(number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"""
    if number >= 1_000_000:
        return f"{number / 1_000_000:.1f}–ú"
    elif number >= 1_000:
        return f"{number / 1_000:.1f}–ö"
    else:
        return str(number)

def create_progress_bar(current: int, total: int, length: int = 20) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return "‚ñë" * length
    
    progress = current / total
    filled_length = int(length * progress)
    
    bar = "‚ñà" * filled_length + "‚ñë" * (length - filled_length)
    percentage = progress * 100
    
    return f"{bar} {percentage:.1f}%"

def parse_command_args(text: str) -> List[str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    if not text:
        return []
    
    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
    parts = text.split()
    if not parts:
        return []
    
    return parts[1:]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    if not text:
        return ""
    
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

class MessageThrottler:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, max_messages: int = 30, period: int = 60):
        self.max_messages = max_messages
        self.period = period
        self.messages = []
    
    async def can_send(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        now = datetime.now()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages = [
            msg_time for msg_time in self.messages 
            if now - msg_time < timedelta(seconds=self.period)
        ]
        
        return len(self.messages) < self.max_messages
    
    async def add_message(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.messages.append(datetime.now())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π throttler –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
message_throttler = MessageThrottler()

async def safe_send_message(bot, chat_id: int, text: str, **kwargs) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    try:
        if not await message_throttler.can_send():
            logger.warning("Message rate limit exceeded")
            return False
        
        await bot.send_message(chat_id=chat_id, text=text, **kwargs)
        await message_throttler.add_message()
        return True
        
    except Exception as e:
        logger.error(f"Failed to send message to {chat_id}: {e}")
        return False

def get_config_value(config: Dict[str, Any], path: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –ø—É—Ç–∏"""
    try:
        keys = path.split('.')
        value = config
        
        for key in keys:
            value = value[key]
        
        return value
    except (KeyError, TypeError):
        return default

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
EMOJI_SUCCESS = "‚úÖ"
EMOJI_ERROR = "‚ùå"
EMOJI_WARNING = "‚ö†Ô∏è"
EMOJI_INFO = "‚ÑπÔ∏è"
EMOJI_FIRE = "üî•"
EMOJI_STATS = "üìä"
EMOJI_USER = "üë§"
EMOJI_USERS = "üë•"
EMOJI_MESSAGE = "üí¨"
EMOJI_LEAD = "üéØ"
EMOJI_CHANNEL = "üì∫"
EMOJI_ADMIN = "üîß"
EMOJI_SETTINGS = "‚öôÔ∏è"
EMOJI_BROADCAST = "üì¢"
