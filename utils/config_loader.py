"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
import yaml
import logging
from typing import Dict, Any, List
from dotenv import load_dotenv
from pathlib import Path

logger = logging.getLogger(__name__)

def load_config(config_path: str = "config.yaml", env_path: str = ".env") -> Dict[str, Any]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è > config.yaml > –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    if Path(env_path).exists():
        load_dotenv(env_path)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {env_path}")
    else:
        logger.warning(f"–§–∞–π–ª {env_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML
    base_config = {}
    if Path(config_path).exists():
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                base_config = yaml.safe_load(f) or {}
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {config_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {config_path}: {e}")
    
    # –°—Ç—Ä–æ–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config = build_config_from_env(base_config)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    validate_config(config)
    
    return config

def build_config_from_env(base_config: Dict[str, Any]) -> Dict[str, Any]:
    """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    
    config = {
        'bot': {
            'name': os.getenv('BOT_NAME', base_config.get('bot', {}).get('name', 'AI CRM Bot')),
            'token': os.getenv('BOT_TOKEN', base_config.get('bot', {}).get('token', '')),
            'admin_ids': parse_admin_ids(
                os.getenv('ADMIN_IDS'), 
                base_config.get('bot', {}).get('admin_ids', [])
            )
        },
        
        'claude': {
            'api_key': os.getenv('CLAUDE_API_KEY', base_config.get('claude', {}).get('api_key', '')),
            'model': os.getenv('CLAUDE_MODEL', base_config.get('claude', {}).get('model', 'claude-3-5-sonnet-20241022')),
            'max_tokens': int(os.getenv('CLAUDE_MAX_TOKENS', base_config.get('claude', {}).get('max_tokens', 1000))),
            'temperature': float(os.getenv('CLAUDE_TEMPERATURE', base_config.get('claude', {}).get('temperature', 0.7)))
        },
        
        'database': {
            'path': os.getenv('DATABASE_PATH', base_config.get('database', {}).get('path', 'data/bot.db'))
        },
        
        'parsing': {
            'enabled': parse_bool(os.getenv('PARSING_ENABLED'), base_config.get('parsing', {}).get('enabled', True)),
            'channels': parse_channels(
                os.getenv('PARSING_CHANNELS'),
                base_config.get('parsing', {}).get('channels', [])
            ),
            'min_interest_score': int(os.getenv('PARSING_MIN_SCORE', base_config.get('parsing', {}).get('min_interest_score', 60))),
            'parse_interval': int(os.getenv('PARSING_INTERVAL', base_config.get('parsing', {}).get('parse_interval', 3600))),
            'max_messages_per_parse': int(os.getenv('PARSING_MAX_MESSAGES', base_config.get('parsing', {}).get('max_messages_per_parse', 50)))
        },
        
        'features': {
            'auto_response': parse_bool(os.getenv('AUTO_RESPONSE'), base_config.get('features', {}).get('auto_response', True)),
            'save_all_messages': parse_bool(os.getenv('SAVE_MESSAGES'), base_config.get('features', {}).get('save_all_messages', True)),
            'lead_notifications': parse_bool(os.getenv('LEAD_NOTIFICATIONS'), base_config.get('features', {}).get('lead_notifications', True)),
            'analytics': parse_bool(os.getenv('ANALYTICS'), base_config.get('features', {}).get('analytics', True))
        },
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–º–ø—Ç—ã –±–µ—Ä–µ–º –∏–∑ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        'messages': base_config.get('messages', get_default_messages()),
        'prompts': base_config.get('prompts', get_default_prompts())
    }
    
    return config

def parse_admin_ids(env_value: str, fallback: List[int]) -> List[int]:
    """–ü–∞—Ä—Å–∏—Ç admin_ids –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not env_value:
        return fallback
    
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—è—Ç—ã–º–∏
        ids = [int(x.strip()) for x in env_value.split(',') if x.strip()]
        return ids
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_IDS: {e}")
        return fallback

def parse_channels(env_value: str, fallback: List[str]) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if not env_value:
        return fallback
    
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—è—Ç—ã–º–∏
        channels = [x.strip() for x in env_value.split(',') if x.strip()]
        return channels
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PARSING_CHANNELS: {e}")
        return fallback

def parse_bool(env_value: str, fallback: bool = True) -> bool:
    """–ü–∞—Ä—Å–∏—Ç boolean –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if env_value is None:
        return fallback
    
    return env_value.lower() in ('true', '1', 'yes', 'on', 'enabled')

def validate_config(config: Dict[str, Any]) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not config['bot']['token']:
        errors.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if not config['bot']['admin_ids']:
        errors.append("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    if not config['claude']['api_key'] or config['claude']['api_key'] == 'your_claude_api_key_here':
        logger.warning("CLAUDE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞")
    
    if config['parsing']['enabled'] and not config['parsing']['channels']:
        logger.warning("–ü–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    if errors:
        error_msg = "–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"- {error}" for error in errors)
        logger.error(error_msg)
        raise ValueError(error_msg)
    
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞")

def get_default_messages() -> Dict[str, str]:
    """–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        'welcome': '''ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-CRM –±–æ—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.
–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!''',
        
        'help': '''‚ÑπÔ∏è –ü–æ–º–æ—â—å:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —Å–ø—Ä–∞–≤–∫–∞
/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é''',
        
        'menu': '''üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.''',
        
        'contact': '''üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:

‚Ä¢ Telegram: @support
‚Ä¢ Email: support@example.com''',
        
        'error': '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    }

def get_default_prompts() -> Dict[str, str]:
    """–ü—Ä–æ–º–ø—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        'analyze_interest': '''–û—Ü–µ–Ω–∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–∫—É–ø–∫–µ –ø–æ —à–∫–∞–ª–µ 0-100.

–í—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å: –∫—É–ø–∏—Ç—å, –∑–∞–∫–∞–∑–∞—Ç—å, —Ü–µ–Ω–∞
–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å: –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ–¥–æ–π–¥–µ—Ç
–ù–∏–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å: –¥–æ—Ä–æ–≥–æ, –Ω–µ –Ω—É–∂–Ω–æ

–°–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º 0-100.''',
        
        'generate_response': '''–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ CRM –±–æ—Ç–∞.

–û—Ç–≤–µ—Ç—å –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.
–ï—Å–ª–∏ –≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å - –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ –ø–æ–∫—É–ø–∫–µ.
–û—Ç–≤–µ—Ç –¥–æ 200 —Å–ª–æ–≤.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
–ò–Ω—Ç–µ—Ä–µ—Å: {interest_score}/100''',
        
        'analyze_lead': '''–û—Ü–µ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ 0-100.

–ò—â–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å.

–°–æ–æ–±—â–µ–Ω–∏–µ: "{message}"
–ö–∞–Ω–∞–ª: {channel}

–û—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º 0-100.'''
    }

def print_config_summary(config: Dict[str, Any]) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("=== –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    logger.info(f"–ë–æ—Ç: {config['bot']['name']}")
    logger.info(f"–ê–¥–º–∏–Ω–æ–≤: {len(config['bot']['admin_ids'])}")
    logger.info(f"Claude API: {'‚úì' if config['claude']['api_key'] and config['claude']['api_key'] != 'your_claude_api_key_here' else '‚úó'}")
    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥: {'‚úì' if config['parsing']['enabled'] else '‚úó'}")
    logger.info(f"–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(config['parsing']['channels'])}")
    logger.info(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: {'‚úì' if config['features']['auto_response'] else '‚úó'}")
    logger.info("===========================")

def get_parsing_channels_info(config: Dict[str, Any]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    channels = config.get('parsing', {}).get('channels', [])
    if not channels:
        return "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    info = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
    for i, channel in enumerate(channels[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
        info += f"{i}. {channel}\n"
    
    if len(channels) > 5:
        info += f"... –∏ –µ—â–µ {len(channels) - 5}"
    
    return info

def validate_channel_format(channel: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞"""
    if not channel:
        return False
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º @username –∏ -100123456789 —Ñ–æ—Ä–º–∞—Ç—ã
    if channel.startswith('@'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º username —Ñ–æ—Ä–º–∞—Ç
        username = channel[1:]
        if len(username) >= 5 and username.replace('_', '').isalnum():
            return True
    elif channel.startswith('-100'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Ñ–æ—Ä–º–∞—Ç
        try:
            int(channel)
            return True
        except ValueError:
            pass
    
    return False

def get_config_validation_report(config: Dict[str, Any]) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    report = {
        'valid': True,
        'errors': [],
        'warnings': [],
        'info': {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
    if not config['bot']['token']:
        report['errors'].append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        report['valid'] = False
    
    if not config['bot']['admin_ids']:
        report['errors'].append("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        report['valid'] = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Claude
    if not config['claude']['api_key'] or config['claude']['api_key'] == 'your_claude_api_key_here':
        report['warnings'].append("Claude API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    if config['parsing']['enabled']:
        if not config['parsing']['channels']:
            report['warnings'].append("–ü–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            invalid_channels = []
            for channel in config['parsing']['channels']:
                if not validate_channel_format(str(channel)):
                    invalid_channels.append(channel)
            
            if invalid_channels:
                report['warnings'].append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–æ–≤: {invalid_channels}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    report['info'] = {
        'bot_name': config['bot']['name'],
        'admin_count': len(config['bot']['admin_ids']),
        'claude_enabled': bool(config['claude']['api_key'] and config['claude']['api_key'] != 'your_claude_api_key_here'),
        'parsing_enabled': config['parsing']['enabled'],
        'channels_count': len(config['parsing']['channels']),
        'features': {
            'auto_response': config['features']['auto_response'],
            'save_messages': config['features']['save_all_messages'],
            'analytics': config['features']['analytics']
        }
    }
    
    return report