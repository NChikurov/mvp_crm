#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI CRM Bot - main.py
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from utils.config_loader import load_config, print_config_summary, get_config_validation_report
from database.operations import init_database
from database.db_migration import migrate_database_for_ai
from database.dialogue_db_migration import migrate_database_for_dialogues
from handlers.user import UserHandler
from handlers.admin import AdminHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º HTTP —Å–ø–∞–º
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

class FixedAIBot:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–ª–∞—Å—Å AI CRM –±–æ—Ç–∞"""
    
    def __init__(self):
        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û AI –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = load_config()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validation_report = get_config_validation_report(self.config)
        self._print_validation_report(validation_report)
        
        if not validation_report['valid']:
            raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        print_config_summary(self.config)
        self._print_ai_parsing_config()
        
        self.app = None
        self.user_handler = None
        self.admin_handler = None
        self.ai_parser = None

    def _print_validation_report(self, report):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        logger.info("=== –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
        
        if report['errors']:
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for error in report['errors']:
                logger.error(f"   ‚Ä¢ {error}")
        
        if report['warnings']:
            logger.warning("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in report['warnings']:
                logger.warning(f"   ‚Ä¢ {warning}")
        
        info = report['info']
        logger.info("‚ÑπÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        logger.info(f"   ‚Ä¢ –ë–æ—Ç: {info['bot_name']}")
        logger.info(f"   ‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {info['admin_count']}")
        logger.info(f"   ‚Ä¢ Claude API: {'‚úÖ' if info['claude_enabled'] else '‚ùå'}")
        logger.info(f"   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥: {'‚úÖ' if info['parsing_enabled'] else '‚ùå'}")
        logger.info(f"   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {info['channels_count']}")
        
        logger.info("=====================================")

    def _print_ai_parsing_config(self):
        """–í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        parsing_config = self.config.get('parsing', {})
        logger.info("ü§ñ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø AI –ü–ê–†–°–ò–ù–ì–ê:")
        logger.info(f"    ‚öôÔ∏è  –û–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥: {'‚úÖ' if parsing_config.get('enabled', False) else '‚ùå'}")
        logger.info(f"    üë• –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {'‚úÖ' if parsing_config.get('dialogue_analysis_enabled', True) else '‚ùå'}")
        logger.info(f"    üìä –ú–∏–Ω. —Å–∫–æ—Ä: {parsing_config.get('min_confidence_score', 60)}")
        logger.info(f"    üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(parsing_config.get('channels', []))}")
        logger.info(f"    üïê –ò–Ω—Ç–µ—Ä–≤–∞–ª: {parsing_config.get('parse_interval', 3600)} —Å–µ–∫")
        
        channels = parsing_config.get('channels', [])
        if channels:
            logger.info("    üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:")
            for i, channel in enumerate(channels[:5], 1):
                logger.info(f"       {i}. {channel}")
        else:
            logger.warning("    ‚ö†Ô∏è  –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")

    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        logger.info("üîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û AI –±–æ—Ç–∞...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI...")
        await migrate_database_for_ai()
        
        logger.info("üí¨ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤...")
        await migrate_database_for_dialogues()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        bot_token = self.config['bot']['token']
        self.app = Application.builder().token(bot_token).build()
        logger.info("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.user_handler = UserHandler(self.config)
        self.admin_handler = AdminHandler(self.config)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø–∞—Ä—Å–µ—Ä–∞
        await self._initialize_ai_parser_safely()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def _initialize_ai_parser_safely(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û AI –ø–∞—Ä—Å–µ—Ä–∞...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            from myparser import UnifiedAIParser
            
            self.ai_parser = UnifiedAIParser(self.config)
            logger.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô UnifiedAIParser —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.app.bot_data['ai_parser'] = self.ai_parser
            
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {e}")
            
            # Fallback –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            try:
                from myparser import AIContextParser
                self.ai_parser = AIContextParser(self.config)
                logger.info("‚úÖ Fallback AI Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                self.app.bot_data['ai_parser'] = self.ai_parser
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–∏–∫–∞–∫–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {fallback_error}")
                self.ai_parser = None
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            self.ai_parser = None

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.user_handler.start))
        self.app.add_handler(CommandHandler("help", self.user_handler.help_command))
        self.app.add_handler(CommandHandler("menu", self.user_handler.menu))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("admin", self.admin_handler.admin_panel))
        self.app.add_handler(CommandHandler("broadcast", self.admin_handler.broadcast))
        self.app.add_handler(CommandHandler("stats", self.admin_handler.show_stats))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.app.add_handler(CommandHandler("status", self.show_parser_status))
        self.app.add_handler(CommandHandler("dialogues", self.show_active_dialogues))
        self.app.add_handler(CommandHandler("health", self.ai_health_check))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_any_message
        ))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(self.admin_handler.callback_handler)
        self.app.add_handler(self.user_handler.callback_handler)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def show_parser_status(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å AI –ø–∞—Ä—Å–µ—Ä–∞"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            if self.ai_parser:
                status = self.ai_parser.get_status()
                
                message = "ü§ñ <b>–°—Ç–∞—Ç—É—Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û AI –ø–∞—Ä—Å–µ—Ä–∞</b>\n\n"
                message += f"‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                message += f"‚Ä¢ –í–∫–ª—é—á–µ–Ω: {'‚úÖ' if status['enabled'] else '‚ùå'}\n"
                message += f"‚Ä¢ –†–µ–∂–∏–º: {status.get('mode', 'unknown')}\n"
                message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {status['channels_count']}\n"
                message += f"‚Ä¢ –ú–∏–Ω. —Å–∫–æ—Ä: {status['min_confidence_score']}%\n\n"
                
                if status.get('dialogue_tracker'):
                    dt_status = status['dialogue_tracker']
                    message += f"üë• <b>–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤:</b>\n"
                    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {dt_status['active_dialogues']}\n"
                    message += f"‚Ä¢ –ú–∏–Ω. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {dt_status['min_participants']}\n"
                    message += f"‚Ä¢ –ú–∏–Ω. —Å–æ–æ–±—â–µ–Ω–∏–π: {dt_status['min_messages']}\n"
                    message += f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {dt_status['dialogue_timeout_minutes']:.0f} –º–∏–Ω\n\n"
                
                message += f"üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
                for i, channel in enumerate(status['channels'][:5], 1):
                    message += f"{i}. <code>{channel}</code>\n"
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå AI –ø–∞—Ä—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

    async def show_active_dialogues(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            if (self.ai_parser and 
                hasattr(self.ai_parser, 'dialogue_tracker') and 
                self.ai_parser.dialogue_tracker):
                
                active_dialogues = self.ai_parser.dialogue_tracker.active_dialogues
                
                if not active_dialogues:
                    await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç")
                    return
                
                message = f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ({len(active_dialogues)})</b>\n\n"
                
                for dialogue_id, dialogue in list(active_dialogues.items())[:10]:
                    duration = (dialogue.last_activity - dialogue.start_time).total_seconds() / 60
                    participants_count = len(dialogue.participants)
                    messages_count = len(dialogue.messages)
                    
                    message += f"üîπ <b>{dialogue_id[-20:]}...</b>\n"
                    message += f"   üì∫ {dialogue.channel_title}\n"
                    message += f"   üë• {participants_count} —É—á–∞—Å—Ç. üí¨ {messages_count} —Å–æ–æ–±—â.\n"
                    message += f"   ‚è±Ô∏è {duration:.0f} –º–∏–Ω üè¢ {'–î–∞' if dialogue.is_business_related else '–ù–µ—Ç'}\n\n"
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")

    async def ai_health_check(self, update, context):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            from ai.claude_client import get_claude_client
            
            message = "ü§ñ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô AI —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            # Claude API
            claude_client = get_claude_client()
            if claude_client:
                try:
                    health = await claude_client.health_check()
                    stats = claude_client.get_usage_stats()
                    
                    message += f"üß† <b>Claude API:</b> {'‚úÖ' if health else '‚ùå'}\n"
                    message += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {stats['model']}\n"
                    message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats['status']}\n\n"
                except:
                    message += f"üß† <b>Claude API:</b> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            else:
                message += f"üß† <b>Claude API:</b> ‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
            
            # AI –ø–∞—Ä—Å–µ—Ä
            if self.ai_parser:
                status = self.ai_parser.get_status()
                message += f"üîç <b>AI –ü–∞—Ä—Å–µ—Ä:</b> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
                message += f"‚Ä¢ –†–µ–∂–∏–º: {status.get('mode', 'unknown')}\n"
                message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {status['channels_count']}\n"
                
                if status.get('dialogue_tracker'):
                    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {status['dialogue_tracker']['active_dialogues']}\n"
            else:
                message += f"üîç <b>AI –ü–∞—Ä—Å–µ—Ä:</b> ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def handle_any_message(self, update, context):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not update.message or not update.message.text:
                return
            
            chat = update.effective_chat
            user = update.effective_user
            message_text = update.message.text
            
            logger.info("üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message_text[:100]}{'...' if len(message_text) > 100 else ''}'")
            logger.info(f"    üë§ –û—Ç: {user.id} (@{user.username or 'no_username'})")
            logger.info(f"    üìç –ß–∞—Ç: {chat.id} ({chat.type})")
            logger.info(f"    üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
            
            if chat.type == 'private':
                # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info("üì± –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                await self.user_handler.handle_message(update, context)
                
            elif chat.type in ['group', 'supergroup', 'channel']:
                # –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - AI –ø–∞—Ä—Å–∏–Ω–≥
                logger.info("üì∫ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - AI –ø–∞—Ä—Å–∏–Ω–≥")
                
                if not self.ai_parser:
                    logger.warning("‚ö†Ô∏è AI –ø–∞—Ä—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return
                
                if not self.ai_parser.enabled:
                    logger.info("‚ö†Ô∏è AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
                is_monitored = self.ai_parser.is_channel_monitored(chat.id, chat.username)
                
                logger.info(f"    ‚öôÔ∏è  –í–∫–ª—é—á–µ–Ω: {self.ai_parser.enabled}")
                logger.info(f"    üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {'–î–ê' if is_monitored else '–ù–ï–¢'}")
                
                if is_monitored:
                    logger.info("ü§ñ –ó–ê–ü–£–°–ö–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ê–ù–ê–õ–ò–ó!")
                    
                    try:
                        await self.ai_parser.process_message(update, context)
                        logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    except Exception as ai_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {ai_error}")
                else:
                    logger.info("‚è≠Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
            
            logger.info("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            import traceback
            traceback.print_exc()

    async def check_channels_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º"""
        if not self.ai_parser:
            return
        
        status = self.ai_parser.get_status()
        channels = status.get('channels', [])
        
        if not channels:
            logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        bot_info = await self.app.bot.get_me()
        logger.info("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        logger.info(f"    Username: @{bot_info.username}")
        logger.info(f"    ID: {bot_info.id}")
        
        for channel in channels:
            try:
                logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel}")
                
                chat = await self.app.bot.get_chat(channel)
                logger.info(f"    ‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
                logger.info(f"    üÜî ID: {chat.id}")
                logger.info(f"    üìä –¢–∏–ø: {chat.type}")
                
                bot_member = await self.app.bot.get_chat_member(chat.id, bot_info.id)
                logger.info(f"    üë§ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}")
                
                if bot_member.status in ['administrator', 'member']:
                    logger.info("    ‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É")
                else:
                    logger.warning(f"    ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–∞: {bot_member.status}")
                    
            except Exception as e:
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {channel}: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_bot()
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û AI –±–æ—Ç–∞: {self.config['bot']['name']}")
        logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {self.config['bot']['admin_ids']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
        async with self.app:
            await self.app.initialize()
            await self.app.start()
            
            await self.check_channels_access()
            
            logger.info("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
            if self.ai_parser:
                status = self.ai_parser.get_status()
                channels = status.get('channels', [])
                
                if channels:
                    logger.info(f"ü§ñ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {len(channels)} –∫–∞–Ω–∞–ª–æ–≤:")
                    for channel in channels:
                        logger.info(f"    - {channel}")
                    
                    logger.info(f"üéØ –†–ï–ñ–ò–ú: {status.get('mode', 'unknown')}")
                    logger.info("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dialogues –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
                    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI")
                else:
                    logger.warning("‚ö†Ô∏è  –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                logger.warning("‚ö†Ô∏è  AI –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query']
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.Future()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = FixedAIBot()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("üîö –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()