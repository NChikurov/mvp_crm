#!/usr/bin/env python3
"""
AI-CRM Telegram Bot MVP
"""
import asyncio
import logging
import sys
from pathlib import Path
from telegram.ext import Application, CommandHandler, MessageHandler, filters

from utils.config_loader import load_config, print_config_summary
from database.operations import init_database
from handlers.user import UserHandler
from handlers.admin import AdminHandler
from myparser.channel_parser import ChannelParser

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class AIBot:
    def __init__(self, config_path="config.yaml", env_path=".env"):
        try:
            self.config = load_config(config_path, env_path)
            self.app = None
            self.user_handler = None
            self.admin_handler = None
            self.channel_parser = None
            self.running = False
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            print_config_summary(self.config)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise

    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        try:
            await init_database()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            bot_token = self.config['bot']['token']
            if not bot_token:
                raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.app = Application.builder().token(bot_token).build()
            logger.info("Application —Å–æ–∑–¥–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.user_handler = UserHandler(self.config)
            self.admin_handler = AdminHandler(self.config)
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.register_handlers()
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
            self.channel_parser = ChannelParser(self.config)
            
            logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            raise

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("start", self.user_handler.start))
            self.app.add_handler(CommandHandler("help", self.user_handler.help))
            self.app.add_handler(CommandHandler("menu", self.user_handler.menu))
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("admin", self.admin_handler.admin_panel))
            self.app.add_handler(CommandHandler("users", self.admin_handler.show_users))
            self.app.add_handler(CommandHandler("leads", self.admin_handler.show_leads))
            self.app.add_handler(CommandHandler("channels", self.admin_handler.manage_channels))
            self.app.add_handler(CommandHandler("broadcast", self.admin_handler.broadcast))
            self.app.add_handler(CommandHandler("settings", self.admin_handler.settings))
            self.app.add_handler(CommandHandler("stats", self.admin_handler.stats))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∏–∑ –≥—Ä—É–ø–ø)
            self.app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self.handle_any_message
            ))
            
            # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –í–ê–ñ–ï–ù –ü–û–†–Ø–î–û–ö!
            # –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω—Å–∫–∏–µ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
            self.app.add_handler(self.admin_handler.callback_handler)
            # –ü–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ (–æ–±—â–∏–µ)
            self.app.add_handler(self.user_handler.callback_handler)
            
            logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise

    async def handle_any_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–∏—á–Ω—ã–µ + –≥—Ä—É–ø–ø—ã)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not update.message or not update.message.text:
                return
            
            chat_type = update.effective_chat.type
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            message_text = update.message.text.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message_text:
                return
            
            logger.info(f"üîÑ –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: {chat_type} —á–∞—Ç {chat_id}, –æ—Ç {user_id}: '{message_text[:50]}...'")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if chat_type == 'private':
                logger.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
                await self.user_handler.handle_message(update, context)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            elif chat_type in ['group', 'supergroup', 'channel']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞
                channels = self.config.get('parsing', {}).get('channels', [])
                chat_username = getattr(update.effective_chat, 'username', None)
                
                logger.info(f"üì∫ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_type}: {chat_id} (@{chat_username})")
                logger.info(f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: {channels}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏–ª–∏ username
                is_monitored = False
                if str(chat_id) in [str(ch) for ch in channels]:
                    is_monitored = True
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ ID: {chat_id}")
                elif chat_username and f"@{chat_username}" in channels:
                    is_monitored = True
                    logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ username: @{chat_username}")
                
                parsing_enabled = self.config.get('parsing', {}).get('enabled', False)
                logger.info(f"üîß –ü–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {parsing_enabled}")
                
                if is_monitored and parsing_enabled:
                    logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –≥—Ä—É–ø–ø—ã {chat_id}")
                    await self.channel_parser.process_message(update, context)
                else:
                    logger.info(f"‚è≠Ô∏è –ì—Ä—É–ø–ø–∞ {chat_id} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.setup_bot()
            
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {self.config['bot']['name']}")
            logger.info(f"–ê–¥–º–∏–Ω—ã: {self.config['bot']['admin_ids']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
            try:
                bot_info = await self.app.bot.get_me()
                logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: @{bot_info.username} ({bot_info.first_name})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
                raise
            
            self.running = True
            
            logger.info("üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Å–µ—Ä–µ
            if self.config.get('parsing', {}).get('enabled'):
                channels = self.config.get('parsing', {}).get('channels', [])
                logger.info(f"üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø: {len(channels)}")
                for channel in channels:
                    logger.info(f"   - {channel}")
            else:
                logger.info("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å async context manager
            async with self.app:
                await self.app.start()
                await self.app.updater.start_polling(
                    allowed_updates=['message', 'callback_query'], 
                    drop_pending_updates=True
                )
                
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                try:
                    await asyncio.Future()  # –≠—Ç–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ
                except asyncio.CancelledError:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                finally:
                    await self.app.updater.stop()
                    await self.app.stop()
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
        finally:
            self.running = False
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è Windows
        if sys.platform.startswith("win") and sys.version_info >= (3, 8):
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
        bot = AIBot()
        
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(bot.run())
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()