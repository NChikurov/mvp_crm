#!/usr/bin/env python3
"""
AI CRM Bot —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –¥–∏–∞–ª–æ–≥–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from utils.config_loader import load_config, print_config_summary, get_config_validation_report
from database.operations import init_database
from database.db_migration import migrate_database_for_ai
from database.dialogue_db_migration import migrate_database_for_dialogues
from handlers.user import UserHandler
from handlers.admin import AdminHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º HTTP —Å–ø–∞–º
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

class EnhancedAIBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å AI CRM –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self):
        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Enhanced AI –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = load_config()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validation_report = get_config_validation_report(self.config)
        self._print_validation_report(validation_report)
        
        if not validation_report['valid']:
            raise ValueError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        print_config_summary(self.config)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI –ø–∞—Ä—Å–∏–Ω–≥–∞
        self._print_ai_parsing_config()
        
        self.app = None
        self.user_handler = None
        self.admin_handler = None
        self.ai_parser = None

    def _print_validation_report(self, report):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("=== –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
        
        if report['errors']:
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for error in report['errors']:
                logger.error(f"   ‚Ä¢ {error}")
        
        if report['warnings']:
            logger.warning("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in report['warnings']:
                logger.warning(f"   ‚Ä¢ {warning}")
        
        info = report['info']
        logger.info("‚ÑπÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        logger.info(f"   ‚Ä¢ –ë–æ—Ç: {info['bot_name']}")
        logger.info(f"   ‚Ä¢ –ê–¥–º–∏–Ω–æ–≤: {info['admin_count']}")
        logger.info(f"   ‚Ä¢ Claude API: {'‚úÖ' if info['claude_enabled'] else '‚ùå'}")
        logger.info(f"   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥: {'‚úÖ' if info['parsing_enabled'] else '‚ùå'}")
        logger.info(f"   ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {info['channels_count']}")
        
        logger.info("=====================================")

    def _print_ai_parsing_config(self):
        """–í—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        parsing_config = self.config.get('parsing', {})
        logger.info("ü§ñ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø AI –ü–ê–†–°–ò–ù–ì–ê:")
        logger.info(f"    ‚öôÔ∏è  –û–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥: {'‚úÖ' if parsing_config.get('enabled', False) else '‚ùå'}")
        logger.info(f"    üë• –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {'‚úÖ' if parsing_config.get('dialogue_analysis_enabled', True) else '‚ùå'}")
        logger.info(f"    üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∏–∞–ª–æ–≥–∞–º: {'‚úÖ' if parsing_config.get('prefer_dialogue_analysis', True) else '‚ùå'}")
        logger.info(f"    üìä –ú–∏–Ω. —Å–∫–æ—Ä: {parsing_config.get('min_confidence_score', 60)}")
        logger.info(f"    üìà –ú–∏–Ω. —Å–∫–æ—Ä –¥–∏–∞–ª–æ–≥–∞: {parsing_config.get('min_dialogue_confidence', 75)}")
        logger.info(f"    üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(parsing_config.get('channels', []))}")
        logger.info(f"    üïê –ò–Ω—Ç–µ—Ä–≤–∞–ª: {parsing_config.get('parse_interval', 3600)} —Å–µ–∫")
        
        if parsing_config.get('dialogue_analysis_enabled', True):
            logger.info(f"    üë• –ú–∏–Ω. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞: {parsing_config.get('min_dialogue_participants', 2)}")
            logger.info(f"    üí¨ –ú–∏–Ω. —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞: {parsing_config.get('min_dialogue_messages', 3)}")
            logger.info(f"    ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞: {parsing_config.get('dialogue_timeout_minutes', 15)} –º–∏–Ω")
        
        channels = parsing_config.get('channels', [])
        if channels:
            logger.info("    üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:")
            for i, channel in enumerate(channels[:5], 1):
                logger.info(f"       {i}. {channel}")
            if len(channels) > 5:
                logger.info(f"       ... –∏ –µ—â–µ {len(channels) - 5}")
        else:
            logger.warning("    ‚ö†Ô∏è  –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")

    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        logger.info("üîß –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Enhanced AI –±–æ—Ç–∞...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AI
        logger.info("üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI...")
        await migrate_database_for_ai()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        logger.info("üí¨ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤...")
        await migrate_database_for_dialogues()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        bot_token = self.config['bot']['token']
        self.app = Application.builder().token(bot_token).build()
        logger.info("‚úÖ Telegram Application —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.user_handler = UserHandler(self.config)
        self.admin_handler = AdminHandler(self.config)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä
        await self._initialize_ai_parser()

    async def _initialize_ai_parser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø–∞—Ä—Å–µ—Ä–∞ —Å fallback"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            logger.info("ü§ñ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ì–û AI Context Parser...")
            
            try:
                from myparser import IntegratedAIContextParser
                self.ai_parser = IntegratedAIContextParser(self.config)
                logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI Context Parser —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                self.app.bot_data['ai_parser'] = self.ai_parser
                
                return
                
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ fallback –ø–∞—Ä—Å–µ—Ä...")
            
            # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            try:
                from myparser import AIContextParser
                self.ai_parser = AIContextParser(self.config)
                logger.info("‚úÖ Fallback AI Context Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                self.app.bot_data['ai_parser'] = self.ai_parser
                
            except ImportError as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–∞–∫–æ–π AI –ø–∞—Ä—Å–µ—Ä: {e}")
                self.ai_parser = None
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            self.ai_parser = None

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.user_handler.start))
        self.app.add_handler(CommandHandler("help", self.user_handler.help_command))
        self.app.add_handler(CommandHandler("menu", self.user_handler.menu))
        self.app.add_handler(CommandHandler("admin", self.admin_handler.admin_panel))
        self.app.add_handler(CommandHandler("broadcast", self.admin_handler.broadcast))
        
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–º –¥–∏–∞–ª–æ–≥–æ–≤
        self.app.add_handler(CommandHandler("status", self.show_parser_status))
        self.app.add_handler(CommandHandler("dialogues", self.show_active_dialogues))
        self.app.add_handler(CommandHandler("health", self.ai_health_check))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_any_message
        ))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(self.admin_handler.callback_handler)
        self.app.add_handler(self.user_handler.callback_handler)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def show_parser_status(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å AI –ø–∞—Ä—Å–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            if self.ai_parser:
                status = self.ai_parser.get_status()
                
                message = "ü§ñ <b>–°—Ç–∞—Ç—É—Å AI –ø–∞—Ä—Å–µ—Ä–∞</b>\n\n"
                message += f"‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                message += f"‚Ä¢ –í–∫–ª—é—á–µ–Ω: {'‚úÖ' if status['enabled'] else '‚ùå'}\n"
                message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {status['channels_count']}\n"
                message += f"‚Ä¢ –ú–∏–Ω. —Å–∫–æ—Ä: {status['min_confidence_score']}%\n\n"
                
                message += f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</b>\n"
                message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status['individual_active_users']}\n"
                message += f"‚Ä¢ –ö—ç—à –∞–Ω–∞–ª–∏–∑–æ–≤: {status['individual_analysis_cache_size']}\n"
                message += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏–¥–æ–≤: {status['individual_processed_leads_count']}\n\n"
                
                if status.get('dialogue_analysis_enabled'):
                    message += f"üë• <b>–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤:</b>\n"
                    message += f"‚Ä¢ –í–∫–ª—é—á–µ–Ω: ‚úÖ\n"
                    message += f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–∏–∞–ª–æ–≥–∞–º: {'‚úÖ' if status.get('prefer_dialogue_analysis') else '‚ùå'}\n"
                    
                    dialogue_status = status.get('dialogue_tracker', {})
                    if dialogue_status:
                        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {dialogue_status['active_dialogues']}\n"
                        message += f"‚Ä¢ –ú–∏–Ω. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {dialogue_status['min_participants']}\n"
                        message += f"‚Ä¢ –ú–∏–Ω. —Å–æ–æ–±—â–µ–Ω–∏–π: {dialogue_status['min_messages']}\n"
                        message += f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {dialogue_status['dialogue_timeout_minutes']:.0f} –º–∏–Ω\n"
                else:
                    message += f"üë• <b>–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n"
                
                message += f"\nüìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
                for i, channel in enumerate(status['channels'][:5], 1):
                    message += f"{i}. <code>{channel}</code>\n"
                if len(status['channels']) > 5:
                    message += f"... –∏ –µ—â–µ {len(status['channels']) - 5}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
                mode = status.get('mode', 'integrated')
                if mode == 'fallback_individual_only':
                    message += f"\n‚ö†Ô∏è <b>–†–µ–∂–∏–º:</b> Fallback (—Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)"
                else:
                    message += f"\n‚úÖ <b>–†–µ–∂–∏–º:</b> –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π (–¥–∏–∞–ª–æ–≥–∏ + –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π)"
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå AI –ø–∞—Ä—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

    async def show_active_dialogues(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            if (self.ai_parser and 
                hasattr(self.ai_parser, 'dialogue_tracker') and 
                self.ai_parser.dialogue_tracker):
                
                active_dialogues = self.ai_parser.dialogue_tracker.active_dialogues
                
                if not active_dialogues:
                    await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç")
                    return
                
                message = f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ({len(active_dialogues)})</b>\n\n"
                
                for dialogue_id, dialogue in list(active_dialogues.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                    duration = (dialogue.last_activity - dialogue.start_time).total_seconds() / 60
                    participants_count = len(dialogue.participants)
                    messages_count = len(dialogue.messages)
                    
                    message += f"üîπ <b>{dialogue_id}</b>\n"
                    message += f"   üì∫ –ö–∞–Ω–∞–ª: {dialogue.channel_title}\n"
                    message += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}\n"
                    message += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                    message += f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.0f} –º–∏–Ω\n"
                    message += f"   üè¢ –ë–∏–∑–Ω–µ—Å-—Ç–µ–º–∞: {'‚úÖ' if dialogue.is_business_related else '‚ùå'}\n\n"
                
                if len(active_dialogues) > 10:
                    message += f"... –∏ –µ—â–µ {len(active_dialogues) - 10} –¥–∏–∞–ª–æ–≥–æ–≤\n"
                
                await update.message.reply_text(message, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤")

    async def ai_health_check(self, update, context):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        admin_ids = self.config.get('bot', {}).get('admin_ids', [])
        
        if user_id not in admin_ids:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return
        
        try:
            from ai.claude_client import get_claude_client
            
            message = "ü§ñ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Claude –∫–ª–∏–µ–Ω—Ç–∞
            claude_client = get_claude_client()
            if claude_client:
                claude_health = await claude_client.health_check()
                claude_stats = claude_client.get_usage_stats()
                
                message += f"üß† <b>Claude API:</b>\n"
                message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if claude_health else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
                message += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {claude_stats['model']}\n"
                message += f"‚Ä¢ –†–µ–∂–∏–º: {claude_stats['status']}\n"
                message += f"‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {claude_stats['max_tokens']}\n\n"
            else:
                message += f"üß† <b>Claude API:</b> ‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–µ—Ä
            if self.ai_parser:
                parser_status = self.ai_parser.get_status()
                message += f"üîç <b>AI –ü–∞—Ä—Å–µ—Ä:</b>\n"
                message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if parser_status['enabled'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
                message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {parser_status['channels_count']}\n"
                
                if parser_status.get('dialogue_analysis_enabled'):
                    dialogue_status = parser_status.get('dialogue_tracker', {})
                    message += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: ‚úÖ\n"
                    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {dialogue_status.get('active_dialogues', 0)}\n"
                else:
                    message += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: ‚ùå\n"
                
                message += f"‚Ä¢ –ú–∏–Ω. —Å–∫–æ—Ä: {parser_status['min_confidence_score']}%\n"
                message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parser_status['individual_active_users']}\n"
            else:
                message += f"üîç <b>AI –ü–∞—Ä—Å–µ—Ä:</b> ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                from database.operations import get_bot_stats
                stats = await get_bot_stats()
                message += f"\nüíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
                message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
                message += f"‚Ä¢ –õ–∏–¥–æ–≤: {stats.get('total_leads', 0)}\n"
                message += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
            except Exception as e:
                message += f"\nüíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚ùå –û—à–∏–±–∫–∞: {e}\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è AI: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def handle_any_message(self, update, context):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º AI –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            if not update.message or not update.message.text:
                return
            
            chat = update.effective_chat
            user = update.effective_user
            message_text = update.message.text
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info("üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message_text[:50]}...'")
            logger.info(f"    üë§ –û—Ç: {user.id} (@{user.username})")
            logger.info(f"    üìç –ß–∞—Ç: {chat.id} ({chat.type})")
            logger.info(f"    üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if chat.type == 'private':
                # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                logger.info("üì± –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                await self.user_handler.handle_message(update, context)
                
            elif chat.type in ['group', 'supergroup', 'channel']:
                # –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–∏–Ω–≥
                logger.info("üì∫ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–∏–Ω–≥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI –ø–∞—Ä—Å–∏–Ω–≥
                if self.ai_parser and self.ai_parser.enabled:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª
                    is_monitored = self.ai_parser.is_channel_monitored(chat.id, chat.username)
                    
                    logger.info(f"    ‚öôÔ∏è  AI –ø–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {self.ai_parser.enabled}")
                    
                    if hasattr(self.ai_parser, 'channels'):
                        logger.info(f"    üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {self.ai_parser.channels}")
                    
                    logger.info(f"    üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {'–î–ê' if is_monitored else '–ù–ï–¢'}")
                    
                    if is_monitored:
                        logger.info(f"    ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ: ID {chat.id}")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
                        parser_status = self.ai_parser.get_status()
                        if parser_status.get('dialogue_analysis_enabled'):
                            logger.info("ü§ñ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô AI –ê–ù–ê–õ–ò–ó (–¥–∏–∞–ª–æ–≥–∏ + –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π)!")
                        else:
                            logger.info("ü§ñ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô AI –ê–ù–ê–õ–ò–ó!")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI –∞–Ω–∞–ª–∏–∑
                        await self.ai_parser.process_message(update, context)
                    else:
                        logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –∫–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                else:
                    logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            logger.info("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()

    async def check_channels_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º"""
        if not self.ai_parser:
            return
        
        channels = getattr(self.ai_parser, 'channels', [])
        if not channels:
            return
        
        bot_info = await self.app.bot.get_me()
        logger.info("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        logger.info(f"    Username: @{bot_info.username}")
        logger.info(f"    ID: {bot_info.id}")
        
        for channel in channels:
            try:
                logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await self.app.bot.get_chat(channel)
                logger.info(f"    ‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
                logger.info(f"    üÜî ID: {chat.id}")
                logger.info(f"    üìä –¢–∏–ø: {chat.type}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
                bot_member = await self.app.bot.get_chat_member(chat.id, bot_info.id)
                logger.info(f"    üë§ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}")
                
                if bot_member.status in ['administrator', 'member']:
                    logger.info("    ‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É")
                else:
                    logger.warning(f"    ‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {bot_member.status}")
                    
            except Exception as e:
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel}: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_bot()
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Enhanced AI –±–æ—Ç–∞: {self.config['bot']['name']}")
        logger.info(f"üëë –ê–¥–º–∏–Ω—ã: {self.config['bot']['admin_ids']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
        async with self.app:
            await self.app.initialize()
            await self.app.start()
            
            await self.check_channels_access()
            
            logger.info("üéâ ENHANCED AI –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
            if self.ai_parser:
                channels = getattr(self.ai_parser, 'channels', [])
                if channels:
                    status = self.ai_parser.get_status()
                    dialogue_enabled = status.get('dialogue_analysis_enabled', False)
                    prefer_dialogue = status.get('prefer_dialogue_analysis', False)
                    mode = status.get('mode', 'integrated')
                    
                    logger.info(f"ü§ñ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {len(channels)} –∫–∞–Ω–∞–ª–æ–≤:")
                    for channel in channels:
                        logger.info(f"    - {channel}")
                    
                    if mode == 'fallback_individual_only':
                        logger.info("üéØ –†–ï–ñ–ò–ú: Fallback - —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
                        logger.info("‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    elif dialogue_enabled:
                        if prefer_dialogue:
                            logger.info("üéØ –†–ï–ñ–ò–ú: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤ + –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        else:
                            logger.info("üéØ –†–ï–ñ–ò–ú: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                        logger.info("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
                    else:
                        logger.info("üéØ –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    logger.info("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
                    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞")
                    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dialogues –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
                    logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è AI —Å–∏—Å—Ç–µ–º—ã")
                else:
                    logger.warning("‚ö†Ô∏è  AI –ø–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                logger.warning("‚ö†Ô∏è  AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query']
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.Future()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = EnhancedAIBot()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("üîö Enhanced AI –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()