#!/usr/bin/env python3
"""
AI CRM Bot - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å AI Context Parser - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from utils.config_loader import load_config, print_config_summary
from database.operations import init_database
from database.db_migration import migrate_database_for_ai
from handlers.user import UserHandler
from handlers.admin import AdminHandler
from myparser.ai_context_parser import AIContextParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º HTTP —Å–ø–∞–º
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

class AIBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å AI CRM –±–æ—Ç–∞"""
    
    def __init__(self):
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AI –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = load_config()
        print_config_summary(self.config)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI –ø–∞—Ä—Å–∏–Ω–≥–∞
        parsing_config = self.config.get('parsing', {})
        logger.info("ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        logger.info(f"    –í–∫–ª—é—á–µ–Ω: {parsing_config.get('enabled', False)}")
        logger.info(f"    –ö–∞–Ω–∞–ª—ã: {parsing_config.get('channels', [])}")
        logger.info(f"    –ú–∏–Ω. —Å–∫–æ—Ä: {parsing_config.get('min_interest_score', 60)}")
        logger.info(f"    –ò–Ω—Ç–µ—Ä–≤–∞–ª: {parsing_config.get('parse_interval', 3600)} —Å–µ–∫")
        
        self.app = None
        self.user_handler = None
        self.admin_handler = None
        self.ai_parser = None

    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –±–æ—Ç–∞...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AI
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI...")
        await migrate_database_for_ai()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        bot_token = self.config['bot']['token']
        self.app = Application.builder().token(bot_token).build()
        logger.info("Telegram Application —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.user_handler = UserHandler(self.config)
        self.admin_handler = AdminHandler(self.config)
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –ø–∞—Ä—Å–µ—Ä
        self.ai_parser = AIContextParser(self.config)
        logger.info("ü§ñ AI Context Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.user_handler.start))
        self.app.add_handler(CommandHandler("help", self.user_handler.help_command))
        self.app.add_handler(CommandHandler("menu", self.user_handler.menu))
        self.app.add_handler(CommandHandler("admin", self.admin_handler.admin_panel))
        self.app.add_handler(CommandHandler("broadcast", self.admin_handler.broadcast))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_any_message
        ))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(self.admin_handler.callback_handler)
        self.app.add_handler(self.user_handler.callback_handler)
        
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def handle_any_message(self, update, context):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            if not update.message or not update.message.text:
                return
            
            chat = update.effective_chat
            user = update.effective_user
            message_text = update.message.text
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info("üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message_text[:50]}...'")
            logger.info(f"    üë§ –û—Ç: {user.id} (@{user.username})")
            logger.info(f"    üìç –ß–∞—Ç: {chat.id} ({chat.type})")
            logger.info(f"    üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if chat.type == 'private':
                # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                logger.info("üì± –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
                await self.user_handler.handle_message(update, context)
                
            elif chat.type in ['group', 'supergroup', 'channel']:
                # –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–∏–Ω–≥
                logger.info("üì∫ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–∏–Ω–≥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI –ø–∞—Ä—Å–∏–Ω–≥
                if self.ai_parser and self.ai_parser.enabled:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª
                    is_monitored = self.ai_parser.is_channel_monitored(chat.id, chat.username)
                    
                    logger.info(f"    ‚öôÔ∏è  AI –ø–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {self.ai_parser.enabled}")
                    logger.info(f"    üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {self.ai_parser.channels}")
                    logger.info(f"    üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {'–î–ê' if is_monitored else '–ù–ï–¢'}")
                    
                    if is_monitored:
                        logger.info(f"    ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ: ID {chat.id}")
                        logger.info("ü§ñ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê AI –ê–ù–ê–õ–ò–ó!")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI –∞–Ω–∞–ª–∏–∑
                        await self.ai_parser.process_message(update, context)
                    else:
                        logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: –∫–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                else:
                    logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
            
            logger.info("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()

    async def check_channels_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º"""
        if not self.ai_parser or not self.ai_parser.channels:
            return
        
        bot_info = await self.app.bot.get_me()
        logger.info("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        logger.info(f"    Username: @{bot_info.username}")
        logger.info(f"    ID: {bot_info.id}")
        
        for channel in self.ai_parser.channels:
            try:
                logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await self.app.bot.get_chat(channel)
                logger.info(f"    ‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
                logger.info(f"    üÜî ID: {chat.id}")
                logger.info(f"    üìä –¢–∏–ø: {chat.type}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
                bot_member = await self.app.bot.get_chat_member(chat.id, bot_info.id)
                logger.info(f"    üë§ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}")
                
                if bot_member.status in ['administrator', 'member']:
                    logger.info("    ‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É")
                else:
                    logger.warning(f"    ‚ö†Ô∏è  –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {bot_member.status}")
                    
            except Exception as e:
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel}: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.setup_bot()
        
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info(f"–ó–∞–ø—É—Å–∫ AI –±–æ—Ç–∞: {self.config['bot']['name']}")
        logger.info(f"–ê–¥–º–∏–Ω—ã: {self.config['bot']['admin_ids']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º
        async with self.app:
            await self.app.initialize()
            await self.app.start()
            
            await self.check_channels_access()
            
            logger.info("üöÄ AI –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
            
            if self.ai_parser and self.ai_parser.channels:
                logger.info(f"ü§ñ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {len(self.ai_parser.channels)} –∫–∞–Ω–∞–ª–æ–≤:")
                for channel in self.ai_parser.channels:
                    logger.info(f"    - {channel}")
                logger.info("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
            else:
                logger.warning("‚ö†Ô∏è  AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query']
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.Future()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = AIBot()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("AI –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()