#!/usr/bin/env python3
"""
AI-CRM Telegram Bot MVP —Å –æ—Ç–ª–∞–¥–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞
"""
import asyncio
import logging
import sys
from pathlib import Path
from telegram.ext import Application, CommandHandler, MessageHandler, filters

from utils.config_loader import load_config, print_config_summary
from database.operations import init_database
from handlers.user import UserHandler
from handlers.admin import AdminHandler
from myparser.channel_parser import ChannelParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–ø–∞–º–∞
class NoHTTPFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–ø–∞–º–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def filter(self, record):
        # –ë–ª–æ–∫–∏—Ä—É–µ–º HTTP –ª–æ–≥–∏ –æ—Ç httpx –∏ telegram
        if 'httpx' in record.name.lower():
            return False
        if 'HTTP Request: POST https://api.telegram.org' in record.getMessage():
            return False
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
for handler in logging.getLogger().handlers:
    handler.addFilter(NoHTTPFilter())

# –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('telegram.ext').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

class AIBot:
    def __init__(self, config_path="config.yaml", env_path=".env"):
        try:
            self.config = load_config(config_path, env_path)
            self.app = None
            self.user_handler = None
            self.admin_handler = None
            self.channel_parser = None
            self.running = False
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            print_config_summary(self.config)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self._log_parsing_config()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise

    def _log_parsing_config(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        parsing_config = self.config.get('parsing', {})
        logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        logger.info(f"   –í–∫–ª—é—á–µ–Ω: {parsing_config.get('enabled', False)}")
        logger.info(f"   –ö–∞–Ω–∞–ª—ã: {parsing_config.get('channels', [])}")
        logger.info(f"   –ú–∏–Ω. —Å–∫–æ—Ä: {parsing_config.get('min_interest_score', 60)}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {parsing_config.get('parse_interval', 3600)} —Å–µ–∫")
        
        if parsing_config.get('parse_interval', 3600) > 300:
            logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç - –ª–∏–¥—ã –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ!")

    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        try:
            await init_database()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            bot_token = self.config['bot']['token']
            if not bot_token:
                raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.app = Application.builder().token(bot_token).build()
            logger.info("Application —Å–æ–∑–¥–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.user_handler = UserHandler(self.config)
            self.admin_handler = AdminHandler(self.config)
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.register_handlers()
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
            self.channel_parser = ChannelParser(self.config)
            
            logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            raise

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("start", self.user_handler.start))
            self.app.add_handler(CommandHandler("help", self.user_handler.help))
            self.app.add_handler(CommandHandler("menu", self.user_handler.menu))
            
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("admin", self.admin_handler.admin_panel))
            self.app.add_handler(CommandHandler("users", self.admin_handler.show_users))
            self.app.add_handler(CommandHandler("leads", self.admin_handler.show_leads))
            self.app.add_handler(CommandHandler("channels", self.admin_handler.manage_channels))
            self.app.add_handler(CommandHandler("broadcast", self.admin_handler.broadcast))
            self.app.add_handler(CommandHandler("settings", self.admin_handler.settings))
            self.app.add_handler(CommandHandler("stats", self.admin_handler.stats))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∏–∑ –≥—Ä—É–ø–ø)
            self.app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self.handle_any_message
            ))
            
            # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –í–ê–ñ–ï–ù –ü–û–†–Ø–î–û–ö!
            # –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω—Å–∫–∏–µ (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å pattern)
            self.app.add_handler(self.admin_handler.callback_handler)
            # –ü–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ (—Å pattern –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback)
            self.app.add_handler(self.user_handler.callback_handler)
            
            logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise

    async def handle_any_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–∏—á–Ω—ã–µ + –≥—Ä—É–ø–ø—ã) —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not update.message or not update.message.text:
                return
            
            chat_type = update.effective_chat.type
            chat_id = update.effective_chat.id
            user_id = update.effective_user.id
            message_text = update.message.text.strip()
            chat_username = getattr(update.effective_chat, 'username', None)
            chat_title = getattr(update.effective_chat, 'title', None)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message_text:
                return
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
            logger.info(f"   üí¨ –¢–µ–∫—Å—Ç: '{message_text[:100]}...'")
            logger.info(f"   üë§ –û—Ç: {user_id} (@{getattr(update.effective_user, 'username', '–±–µ–∑ username')})")
            logger.info(f"   üìç –ß–∞—Ç: {chat_id} ({chat_type})")
            if chat_username:
                logger.info(f"   üè∑Ô∏è  Username: @{chat_username}")
            if chat_title:
                logger.info(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            if chat_type == 'private':
                logger.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                await self.user_handler.handle_message(update, context)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            elif chat_type in ['group', 'supergroup', 'channel']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞
                channels = self.config.get('parsing', {}).get('channels', [])
                parsing_enabled = self.config.get('parsing', {}).get('enabled', False)
                
                logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª:")
                logger.info(f"   ‚öôÔ∏è  –ü–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {parsing_enabled}")
                logger.info(f"   üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channels}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏–ª–∏ username
                is_monitored = False
                matched_by = None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID
                if str(chat_id) in [str(ch) for ch in channels]:
                    is_monitored = True
                    matched_by = f"ID {chat_id}"
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username
                elif chat_username and f"@{chat_username}" in channels:
                    is_monitored = True
                    matched_by = f"Username @{chat_username}"
                
                logger.info(f"   üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {'–î–ê' if is_monitored else '–ù–ï–¢'}")
                if matched_by:
                    logger.info(f"   ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ: {matched_by}")
                
                if is_monitored and parsing_enabled:
                    logger.info(f"üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ü–ê–†–°–ò–ù–ì!")
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ CRM —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    crm_words = ['crm', '—Ü—Ä–º', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Å–∏—Å—Ç–µ–º–∞', '–∏—â—É']
                    found_words = [word for word in crm_words if word.lower() in message_text.lower()]
                    
                    if found_words:
                        logger.info(f"üî• –û–ë–ù–ê–†–£–ñ–ï–ù–´ CRM –°–õ–û–í–ê: {found_words}")
                        logger.info(f"üéØ –í–´–°–û–ö–ê–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –õ–ò–î–ê!")
                    
                    await self.channel_parser.process_message(update, context)
                else:
                    reasons = []
                    if not parsing_enabled:
                        reasons.append("–ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
                    if not is_monitored:
                        reasons.append("–∫–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                    
                    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {', '.join(reasons)}")
            
            logger.info("‚îÄ" * 60)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()

    async def check_bot_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö"""
        try:
            bot_info = await self.app.bot.get_me()
            logger.info(f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
            logger.info(f"   Username: @{bot_info.username}")
            logger.info(f"   ID: {bot_info.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã
            channels = self.config.get('parsing', {}).get('channels', [])
            for channel in channels:
                try:
                    logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                    if channel.startswith('@'):
                        chat_info = await self.app.bot.get_chat(channel)
                    else:
                        chat_info = await self.app.bot.get_chat(int(channel))
                    
                    logger.info(f"   ‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat_info.title}")
                    logger.info(f"   üÜî ID: {chat_info.id}")
                    logger.info(f"   üìä –¢–∏–ø: {chat_info.type}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
                    bot_member = await self.app.bot.get_chat_member(chat_info.id, bot_info.id)
                    logger.info(f"   üë§ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}")
                    
                    if bot_member.status == 'administrator':
                        logger.info(f"   ‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞
                        if hasattr(bot_member, 'can_read_all_group_messages'):
                            can_read = bot_member.can_read_all_group_messages
                            logger.info(f"   üìñ –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {can_read}")
                            if not can_read:
                                logger.warning(f"   ‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π!")
                        
                    elif bot_member.status == 'member':
                        logger.warning(f"   ‚ö†Ô∏è –ë–æ—Ç –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (–Ω–µ –∞–¥–º–∏–Ω)")
                        logger.warning(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                    else:
                        logger.error(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {bot_member.status}")
                        
                except Exception as channel_error:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel}: {channel_error}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.setup_bot()
            
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {self.config['bot']['name']}")
            logger.info(f"–ê–¥–º–∏–Ω—ã: {self.config['bot']['admin_ids']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
            try:
                bot_info = await self.app.bot.get_me()
                logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: @{bot_info.username} ({bot_info.first_name})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
                raise
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö
            await self.check_bot_permissions()
            
            self.running = True
            
            logger.info("üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Å–µ—Ä–µ
            if self.config.get('parsing', {}).get('enabled'):
                channels = self.config.get('parsing', {}).get('channels', [])
                logger.info(f"üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø: {len(channels)}")
                for channel in channels:
                    logger.info(f"   - {channel}")
                    
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                interval = self.config.get('parsing', {}).get('parse_interval', 3600)
                if interval > 300:  # –ë–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
                    logger.warning(f"‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–æ–ª—å—à–æ–π ({interval} —Å–µ–∫). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 60-300 —Å–µ–∫ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                
                logger.info("üì® –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ò—â—É CRM —Å–∏—Å—Ç–µ–º—É' –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            else:
                logger.info("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å async context manager
            async with self.app:
                await self.app.start()
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await self.app.updater.start_polling(
                    allowed_updates=['message', 'callback_query'], 
                    drop_pending_updates=True,
                    poll_interval=1.0,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    timeout=10  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
                )
                
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                try:
                    await asyncio.Future()  # –≠—Ç–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ
                except asyncio.CancelledError:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                finally:
                    await self.app.updater.stop()
                    await self.app.stop()
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
        finally:
            self.running = False
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è Windows
        if sys.platform.startswith("win") and sys.version_info >= (3, 8):
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
        bot = AIBot()
        
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        asyncio.run(bot.run())
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()