"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI Context Parser - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
–í–µ—Ä—Å–∏—è –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from dataclasses import dataclass, asdict
from telegram import Update, User
from telegram.ext import ContextTypes

from database.operations import create_lead, update_channel_stats
from database.models import Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

@dataclass
class UserContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    messages: List[Dict[str, Any]]
    first_seen: datetime
    last_activity: datetime
    channel_info: Dict[str, Any]

@dataclass
class AIAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)"""
    is_lead: bool
    confidence_score: int
    lead_quality: str
    interests: List[str]
    buying_signals: List[str]
    urgency_level: str
    recommended_action: str
    key_insights: List[str]
    estimated_budget: Optional[str]
    timeline: Optional[str]
    pain_points: List[str]
    decision_stage: str

class AIContextParser:
    """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AI –ø–∞—Ä—Å–µ—Ä –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (–¥–ª—è fallback)"""
    
    def __init__(self, config):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = self.parsing_config.get('enabled', True)
        self.channels = self._parse_channels()
        self.min_confidence_score = self.parsing_config.get('min_confidence_score', 70)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.context_window_hours = self.parsing_config.get('context_window_hours', 24)
        self.min_messages_for_analysis = self.parsing_config.get('min_messages_for_analysis', 1)
        self.max_context_messages = self.parsing_config.get('max_context_messages', 10)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.user_contexts: Dict[int, UserContext] = {}
        self.analysis_cache: Dict[str, AIAnalysisResult] = {}
        self.processed_leads: Dict[int, datetime] = {}
        
        logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AIContextParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        logger.info(f"  - –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence_score}%")

    def _parse_channels(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            return [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            return [str(channels_raw)]
        return []

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)"""
        try:
            if not self.enabled:
                logger.info("‚ùå AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
                return
            
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞")
                return
            
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä):")
            logger.info(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message.text[:50]}...'")
            logger.info(f"    üìç –ö–∞–Ω–∞–ª: {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            if not self.is_channel_monitored(chat_id, update.effective_chat.username):
                logger.info("‚è≠Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return
            
            # –¢–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            logger.info("üë§ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await self._process_individual_message(update, context)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º AI –ø–∞—Ä—Å–µ—Ä–µ: {e}")
            import traceback
            traceback.print_exc()

    async def _process_individual_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        try:
            user = update.effective_user
            message = update.message
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._update_user_context(user, message, update.effective_chat)
            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            user_context = self.user_contexts.get(user.id)
            if not user_context:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            logger.info(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(user_context.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É
            if not self._should_analyze_user(user_context):
                logger.info(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ
            if self._was_recently_analyzed(user.id):
                logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
                return
            
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            analysis = await self._analyze_user_context(user_context)
            
            if analysis:
                logger.info(f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
                logger.info(f"    üéØ –õ–∏–¥: {analysis.is_lead}")
                logger.info(f"    üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}%")
                logger.info(f"    üî• –ö–∞—á–µ—Å—Ç–≤–æ: {analysis.lead_quality}")
                
                if analysis.is_lead and analysis.confidence_score >= self.min_confidence_score:
                    logger.info("üéØ –°–û–ó–î–ê–ï–ú –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –õ–ò–î–ê!")
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏–¥
                    await self._create_lead_from_individual_analysis(user_context, analysis, context)
                    
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
                    self.processed_leads[user.id] = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
                    await self._update_channel_stats(str(update.effective_chat.id), 
                                                   message.message_id, True)
                else:
                    logger.info(f"‚ùå –ù–µ –ª–∏–¥: score={analysis.confidence_score}, min={self.min_confidence_score}")
                    await self._update_channel_stats(str(update.effective_chat.id), 
                                                   message.message_id, False)
            else:
                logger.warning("‚ùå –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                await self._update_channel_stats(str(update.effective_chat.id), 
                                               message.message_id, False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def _update_user_context(self, user: User, message, chat):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        try:
            user_id = user.id
            current_time = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if user_id not in self.user_contexts:
                logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self.user_contexts[user_id] = UserContext(
                    user_id=user_id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    messages=[],
                    first_seen=current_time,
                    last_activity=current_time,
                    channel_info={
                        'id': chat.id,
                        'title': chat.title,
                        'username': chat.username,
                        'type': chat.type
                    }
                )
            
            user_context = self.user_contexts[user_id]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = {
                'text': message.text,
                'date': message.date.isoformat() if message.date else current_time.isoformat(),
                'message_id': message.message_id,
                'timestamp': current_time.isoformat()
            }
            
            user_context.messages.append(message_data)
            user_context.last_activity = current_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_context.username = user.username
            user_context.first_name = user.first_name
            user_context.last_name = user.last_name
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if len(user_context.messages) > self.max_context_messages:
                user_context.messages = user_context.messages[-self.max_context_messages:]
            
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –í—Å–µ–≥–æ: {len(user_context.messages)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

    def _should_analyze_user(self, user_context: UserContext) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É"""
        messages_count = len(user_context.messages)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if messages_count < self.min_messages_for_analysis:
            logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {messages_count} < {self.min_messages_for_analysis}")
            return False
        
        # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        if messages_count == 1:
            first_message = user_context.messages[0]['text'].lower()
            strong_signals = self._has_strong_buying_signals(first_message)
            
            if strong_signals:
                logger.info(f"üî• –°–ò–õ–¨–ù–´–ï –ü–û–ö–£–ü–ê–¢–ï–õ–¨–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
                return True
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ - –∂–¥–µ–º –≤—Ä–µ–º—è –∏–ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            time_since_last = datetime.now() - user_context.last_activity
            if time_since_last > timedelta(minutes=2):
                logger.info(f"‚úÖ –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {time_since_last}")
                return True
            
            logger.info(f"‚è≥ –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –∂–¥–µ–º: {time_since_last} < 2 –º–∏–Ω")
            return False
        
        # –î–ª—è 2+ —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        if messages_count >= 2:
            logger.info(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {messages_count}")
            return True
        
        return False

    def _has_strong_buying_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        strong_signals = [
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å',
            '–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å', '–ø–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å', '—Å–æ–±–∏—Ä–∞—é—Å—å –∫—É–ø–∏—Ç—å',
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '–∫–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞ –∑–∞',
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥', '–ø—Ä–∞–π—Å-–ª–∏—Å—Ç', '–ø—Ä–∞–π—Å –ª–∏—Å—Ç', '—Ä–∞—Å—Ü–µ–Ω–∫–∏',
            '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–Ω—É–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è', '–Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å', '–∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ',
            '–∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', '—Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞', '—Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞',
            '–Ω—É–∂–µ–Ω –±–æ—Ç', '–∏—â—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', '–Ω—É–∂–Ω–∞ crm', '–∑–∞–∫–∞–∑–∞—Ç—å crm',
            '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å', '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é',
            '–æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', '–æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è', '–æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
            '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ü–µ–Ω–µ'
        ]
        
        for signal in strong_signals:
            if signal in text:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–ª—å–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: '{signal}'")
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–ª–æ–≤
        buying_words = ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω—É–∂–Ω–æ', '–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω–∞', '—Ö–æ—á—É', '–∏—â—É']
        service_words = ['–±–æ—Ç', 'crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü', '—Ä–∞–∑—Ä–∞–±–æ—Ç', '—Å–∏—Å—Ç–µ–º']
        
        buying_found = any(word in text for word in buying_words)
        service_found = any(word in text for word in service_words)
        
        if buying_found and service_found:
            logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ + –Ω–∞—à–∏ —É—Å–ª—É–≥–∏")
            return True
        
        return False

    def _was_recently_analyzed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ"""
        if user_id in self.processed_leads:
            last_analysis = self.processed_leads[user_id]
            time_diff = datetime.now() - last_analysis
            if time_diff < timedelta(hours=self.context_window_hours):
                logger.info(f"üîÑ –ù–µ–¥–∞–≤–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {time_diff} –Ω–∞–∑–∞–¥")
                return True
        return False

    async def _analyze_user_context(self, user_context: UserContext) -> Optional[AIAnalysisResult]:
        """AI –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        try:
            logger.info("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...")
            
            claude_client = get_claude_client()
            if not claude_client or not claude_client.client:
                logger.warning("‚ùå Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                return self._simple_analysis(user_context)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
            messages_text = " | ".join([msg['text'] for msg in user_context.messages[-5:]])
            cache_key = f"individual_{user_context.user_id}:{hash(messages_text)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key in self.analysis_cache:
                logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {user_context.user_id}")
                return self.analysis_cache[cache_key]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context_data = self._prepare_context_for_ai(user_context)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
            analysis_prompt = self._create_individual_analysis_prompt(context_data)
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ Claude...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                response = await asyncio.wait_for(
                    claude_client.client.messages.create(
                        model=claude_client.model,
                        max_tokens=2000,
                        messages=[{"role": "user", "content": analysis_prompt}],
                        temperature=0.1
                    ),
                    timeout=15.0
                )
                
                logger.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                analysis_result = self._parse_individual_ai_response(response.content[0].text)
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.analysis_cache[cache_key] = analysis_result
                
                logger.info(f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: –ª–∏–¥={analysis_result.is_lead}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={analysis_result.confidence_score}%")
                
                return analysis_result
                
            except asyncio.TimeoutError:
                logger.warning("‚è∞ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑")
                return self._simple_analysis(user_context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._simple_analysis(user_context)

    def _simple_analysis(self, user_context: UserContext) -> AIAnalysisResult:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
        logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        all_text = " ".join([msg['text'] for msg in user_context.messages]).lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        high_interest = ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', 'crm', '–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è']
        medium_interest = ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–¥—Ä–æ–±–Ω–µ–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']
        
        score = 0
        interests = []
        buying_signals = []
        
        for word in high_interest:
            if word in all_text:
                score += 30
                interests.append(word)
                if word in ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞']:
                    buying_signals.append(f"–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{word}'")
        
        for word in medium_interest:
            if word in all_text:
                score += 15
                interests.append(word)
        
        score = min(100, score)
        is_lead = score >= 60
        
        if is_lead:
            lead_quality = "hot" if score >= 80 else "warm"
        else:
            lead_quality = "cold"
        
        result = AIAnalysisResult(
            is_lead=is_lead,
            confidence_score=score,
            lead_quality=lead_quality,
            interests=interests,
            buying_signals=buying_signals,
            urgency_level="medium" if score >= 70 else "low",
            recommended_action="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º" if is_lead else "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            key_insights=[f"–ü—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–ª score {score}"],
            estimated_budget=None,
            timeline=None,
            pain_points=[],
            decision_stage="consideration" if is_lead else "awareness"
        )
        
        logger.info(f"üîß –ü—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: score={score}, –ª–∏–¥={is_lead}")
        return result

    def _prepare_context_for_ai(self, user_context: UserContext) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'user': {
                'id': user_context.user_id,
                'username': user_context.username,
                'first_name': user_context.first_name,
                'last_name': user_context.last_name,
                'first_seen': user_context.first_seen.isoformat(),
                'last_activity': user_context.last_activity.isoformat()
            },
            'messages': user_context.messages,
            'channel': user_context.channel_info,
            'messages_count': len(user_context.messages),
            'activity_span_hours': (user_context.last_activity - user_context.first_seen).total_seconds() / 3600
        }

    def _create_individual_analysis_prompt(self, context_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞"""
        
        messages_text = "\n".join([
            f"[{msg.get('date', 'unknown')}] {msg['text']}" 
            for msg in context_data['messages']
        ])
        
        return f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ IT-—É—Å–ª—É–≥, CRM —Å–∏—Å—Ç–µ–º, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram –±–æ—Ç–æ–≤.

–ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –ò–º—è: {context_data['user']['first_name']} (@{context_data['user']['username']})
- –ö–∞–Ω–∞–ª: {context_data['channel']['title']} ({context_data['channel']['type']})
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {context_data['messages_count']}
- –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {context_data['activity_span_hours']:.1f} —á–∞—Å–æ–≤

–°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{messages_text}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Å–ª—É–≥:
- CRM —Å–∏—Å—Ç–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram –±–æ—Ç–æ–≤
- IT-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏ API —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–†–û–ì–û –í JSON –§–û–†–ú–ê–¢–ï:
{{
    "is_lead": boolean,
    "confidence_score": number (0-100),
    "lead_quality": "hot|warm|cold|not_lead",
    "interests": ["—Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"],
    "buying_signals": ["—Å–∏–≥–Ω–∞–ª—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"],
    "urgency_level": "immediate|short_term|long_term|none",
    "recommended_action": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    "key_insights": ["–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"],
    "estimated_budget": "–ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –∏–ª–∏ null",
    "timeline": "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏–ª–∏ null",
    "pain_points": ["–ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞"],
    "decision_stage": "awareness|consideration|decision|post_purchase"
}}

–û–ë–†–ê–¢–ò–¢–ï –û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
- –ü—Ä—è–º—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã (—Ö–æ—á—É –∫—É–ø–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç, –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å) = –ì–û–†–Ø–ß–ò–ô –õ–ò–î
- –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∏–ª—å–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –≤—ã—Å–æ–∫–∏–π confidence_score (85-95)
- –°—Ä–æ—á–Ω–æ—Å—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
- is_lead: true –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º
- confidence_score: 90-100 = –æ—á–µ–≤–∏–¥–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, 70-89 = –≤–µ—Ä–æ—è—Ç–Ω—ã–π, 50-69 = –≤–æ–∑–º–æ–∂–Ω—ã–π, <50 = –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã–π
- lead_quality: hot = –≥–æ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç—å, warm = –∏–∑—É—á–∞–µ—Ç —Ä—ã–Ω–æ–∫, cold = —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫
- urgency_level: –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ —Ä–µ—à–µ–Ω–∏–µ

–í–ê–ñ–ù–û:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ò—â–∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç
- –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç
- –í—ã—Å–æ–∫–∏–π confidence_score —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –Ω–µ –∑–∞–≤—ã—à–∞–π –æ—Ü–µ–Ω–∫–∏"""

    def _parse_individual_ai_response(self, response_text: str) -> AIAnalysisResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info(f"üìã –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI: {response_text[:200]}...")
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            import re
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if not json_match:
                logger.warning("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI")
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI")
            
            json_str = json_match.group()
            data = json.loads(json_str)
            
            logger.info(f"‚úÖ JSON –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: is_lead={data.get('is_lead')}, score={data.get('confidence_score')}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return AIAnalysisResult(
                is_lead=bool(data.get('is_lead', False)),
                confidence_score=max(0, min(100, int(data.get('confidence_score', 0)))),
                lead_quality=data.get('lead_quality', 'not_lead'),
                interests=data.get('interests', []),
                buying_signals=data.get('buying_signals', []),
                urgency_level=data.get('urgency_level', 'none'),
                recommended_action=data.get('recommended_action', ''),
                key_insights=data.get('key_insights', []),
                estimated_budget=data.get('estimated_budget'),
                timeline=data.get('timeline'),
                pain_points=data.get('pain_points', []),
                decision_stage=data.get('decision_stage', 'awareness')
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI: {e}")
            logger.debug(f"–û—Ç–≤–µ—Ç AI: {response_text}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return AIAnalysisResult(
                is_lead=False,
                confidence_score=0,
                lead_quality='not_lead',
                interests=[],
                buying_signals=[],
                urgency_level='none',
                recommended_action='–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è',
                key_insights=[],
                estimated_budget=None,
                timeline=None,
                pain_points=[],
                decision_stage='awareness'
            )

    async def _create_lead_from_individual_analysis(self, user_context: UserContext, 
                                                  analysis: AIAnalysisResult, 
                                                  context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("üéØ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞ –∏–∑ AI –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_messages = " | ".join([msg['text'] for msg in user_context.messages])
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏–¥–∞
            lead = Lead(
                telegram_id=user_context.user_id,
                username=user_context.username,
                first_name=user_context.first_name,
                last_name=user_context.last_name,
                source_channel=user_context.channel_info['title'] or str(user_context.channel_info['id']),
                interest_score=analysis.confidence_score,
                message_text=all_messages,
                message_date=user_context.last_activity,
                
                # AI –ø–æ–ª—è
                lead_quality=analysis.lead_quality,
                interests=json.dumps(analysis.interests, ensure_ascii=False),
                buying_signals=json.dumps(analysis.buying_signals, ensure_ascii=False),
                urgency_level=analysis.urgency_level,
                estimated_budget=analysis.estimated_budget,
                timeline=analysis.timeline,
                pain_points=json.dumps(analysis.pain_points, ensure_ascii=False),
                decision_stage=analysis.decision_stage,
                notes="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AI (fallback —Ä–µ–∂–∏–º)"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            await create_lead(lead)
            
            logger.info(f"‚úÖ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô AI –õ–ò–î –°–û–ó–î–ê–ù: {user_context.first_name} (@{user_context.username})")
            logger.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {analysis.lead_quality}")
            logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}%")
            logger.info(f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(analysis.interests)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            await self._notify_admins_about_individual_lead(context, user_context, analysis)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞: {e}")
            import traceback
            traceback.print_exc()

    async def _notify_admins_about_individual_lead(self, context: ContextTypes.DEFAULT_TYPE, 
                                                 user_context: UserContext, 
                                                 analysis: AIAnalysisResult):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º AI –ª–∏–¥–µ"""
        try:
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            if not admin_ids:
                logger.warning("‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —ç–º–æ–¥–∑–∏
            priority_config = {
                'hot': {'emoji': 'üî•üî•üî•', 'text': '–ì–û–†–Ø–ß–ò–ô –õ–ò–î', 'color': 'üü•'},
                'warm': {'emoji': 'üî•üî•', 'text': '–¢–ï–ü–õ–´–ô –õ–ò–î', 'color': 'üü®'},
                'cold': {'emoji': 'üî•', 'text': '–•–û–õ–û–î–ù–´–ô –õ–ò–î', 'color': 'üü¶'}
            }
            
            priority = priority_config.get(analysis.lead_quality, 
                                         {'emoji': '‚≠ê', 'text': '–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –õ–ò–î', 'color': '‚¨ú'})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
            interests_text = ', '.join(analysis.interests) if analysis.interests else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'
            pain_points_text = '\n‚Ä¢ '.join(analysis.pain_points) if analysis.pain_points else '–Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã'
            buying_signals_text = '\n‚Ä¢ '.join(analysis.buying_signals) if analysis.buying_signals else '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            username_text = f"@{user_context.username}" if user_context.username else "–±–µ–∑ username"
            
            message = f"""{priority['emoji']} <b>{priority['text']}</b> {priority['color']}

üë§ <b>–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô AI –ê–ù–ê–õ–ò–ó (FALLBACK –†–ï–ñ–ò–ú)</b>

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {user_context.first_name} ({username_text})
üÜî <b>ID:</b> <code>{user_context.user_id}</code>
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {analysis.confidence_score}% 
üìä <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {analysis.lead_quality.upper()}
üì∫ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {user_context.channel_info['title']}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(user_context.messages)}
‚è∞ <b>–ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {(user_context.last_activity - user_context.first_seen).total_seconds() / 3600:.1f}—á

üé™ <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</b> {interests_text}

üö© <b>–ë–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏:</b>
‚Ä¢ {pain_points_text}

üí∞ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã:</b>
‚Ä¢ {buying_signals_text}

‚ö° <b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b> {analysis.urgency_level}
üíµ <b>–ë—é–¥–∂–µ—Ç:</b> {analysis.estimated_budget or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:</b> {analysis.timeline or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üé≠ <b>–°—Ç–∞–¥–∏—è —Ä–µ—à–µ–Ω–∏—è:</b> {analysis.decision_stage}

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
<i>{analysis.recommended_action}</i>

üîç <b>–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>
{chr(10).join([f"‚Ä¢ {insight}" for insight in analysis.key_insights])}

üîó <b>–°–≤—è–∑–∞—Ç—å—Å—è:</b> <a href="tg://user?id={user_context.user_id}">–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥</a>"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            successful_notifications = 0
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    successful_notifications += 1
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {successful_notifications}/{len(admin_ids)} –∞–¥–º–∏–Ω–∞–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ª–∏–¥–µ: {e}")

    async def _update_channel_stats(self, channel_id: str, message_id: int, lead_found: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            leads_count = 1 if lead_found else 0
            await update_channel_stats(channel_id, message_id, leads_count)
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {channel_id}, –ª–∏–¥={lead_found}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def is_channel_monitored(self, chat_id: int, chat_username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        if not self.enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if str(chat_id) in self.channels:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if chat_username:
            username_variants = [f"@{chat_username}", chat_username]
            for variant in username_variants:
                if variant in self.channels:
                    return True
        
        return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        status = {
            'enabled': self.enabled,
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_confidence_score': self.min_confidence_score,
            'context_window_hours': self.context_window_hours,
            'individual_active_users': len(self.user_contexts),
            'individual_analysis_cache_size': len(self.analysis_cache),
            'individual_processed_leads_count': len(self.processed_leads),
            'dialogue_analysis_enabled': False,
            'prefer_dialogue_analysis': False,
            'mode': 'fallback_individual_only'
        }
        
        return status

# Alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
IntegratedAIContextParser = AIContextParser