"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: myparser/integrated_ai_parser.py
–°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç dialogue_analyzer.py
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from dataclasses import dataclass, asdict
from telegram import Update, User
from telegram.ext import ContextTypes

from database.operations import create_lead, update_channel_stats
from database.models import Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

# === –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –î–ò–ê–õ–û–ì–û–í (–í–°–¢–†–û–ï–ù–ù–´–ï) ===

@dataclass
class DialogueParticipant:
    """–£—á–∞—Å—Ç–Ω–∏–∫ –¥–∏–∞–ª–æ–≥–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    role: str  # initiator, responder, observer, influencer
    message_count: int = 0
    first_message_time: Optional[datetime] = None
    last_message_time: Optional[datetime] = None
    engagement_level: str = "low"  # low, medium, high
    buying_signals_count: int = 0
    influence_score: int = 0

@dataclass
class DialogueMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    user_id: int
    username: Optional[str]
    text: str
    timestamp: datetime
    message_id: int
    reply_to_message_id: Optional[int] = None
    reply_to_user_id: Optional[int] = None
    buying_signals: List[str] = None
    sentiment: str = "neutral"  # positive, negative, neutral
    urgency_level: str = "none"  # immediate, high, medium, low, none

@dataclass
class DialogueContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    channel_id: int
    channel_title: str
    participants: Dict[int, DialogueParticipant]
    messages: List[DialogueMessage]
    start_time: datetime
    last_activity: datetime
    topic: Optional[str] = None
    dialogue_type: str = "discussion"
    is_business_related: bool = False
    overall_sentiment: str = "neutral"
    decision_stage: str = "awareness"
    group_buying_probability: float = 0.0

@dataclass
class DialogueAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    is_valuable_dialogue: bool
    confidence_score: int
    potential_leads: List[Dict[str, Any]]
    group_dynamics: Dict[str, Any]
    business_relevance_score: int
    recommended_actions: List[str]
    key_insights: List[str]
    dialogue_summary: str
    participant_analysis: Dict[int, Dict[str, Any]]
    buying_probability: Dict[str, float]
    influence_map: Dict[int, List[int]]
    next_best_action: str
    estimated_timeline: Optional[str]
    group_budget_estimate: Optional[str]

@dataclass
class UserContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    messages: List[Dict[str, Any]]
    first_seen: datetime
    last_activity: datetime
    channel_info: Dict[str, Any]

@dataclass
class AIAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞"""
    is_lead: bool
    confidence_score: int
    lead_quality: str
    interests: List[str]
    buying_signals: List[str]
    urgency_level: str
    recommended_action: str
    key_insights: List[str]
    estimated_budget: Optional[str]
    timeline: Optional[str]
    pain_points: List[str]
    decision_stage: str

# === –í–°–¢–†–û–ï–ù–ù–´–ô –¢–†–ï–ö–ï–† –î–ò–ê–õ–û–ì–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===

class BuiltInDialogueTracker:
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, config):
        self.config = config
        self.active_dialogues: Dict[str, DialogueContext] = {}
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.dialogue_timeout = timedelta(minutes=2)  # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.min_participants = 2
        self.min_messages = 2
        
        self.reply_window = timedelta(minutes=2)
        self.max_dialogue_duration = timedelta(hours=2)
        
        # –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.immediate_analysis_triggers = {
            'strong_buying_signals': [
                '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
                '–Ω—É–∂–µ–Ω –±–æ—Ç', '–∑–∞–∫–∞–∑–∞—Ç—å crm', '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–±—é–¥–∂–µ—Ç'
            ],
            'decision_maker_phrases': [
                '—è —Ä–µ—à–∞—é', '–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ', '—É—Ç–≤–µ—Ä–∂–¥–∞—é', '–ø–æ–∫—É–ø–∞–µ–º',
                '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–≤–ª–∞–¥–µ–ª–µ—Ü'
            ]
        }
        
        logger.info("BuiltInDialogueTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")

    def get_dialogue_id(self, channel_id: int, start_time: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–∏–∞–ª–æ–≥–∞"""
        return f"dialogue_{channel_id}_{start_time.strftime('%Y%m%d_%H%M%S')}"

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                return None
            
            # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            await self._cleanup_expired_dialogues()
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            active_dialogue = self._find_active_dialogue(chat_id)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
            is_dialogue_message = self._is_dialogue_message_improved(message, active_dialogue)
            
            if is_dialogue_message and active_dialogue:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
                await self._add_message_to_dialogue(active_dialogue, user, message)
                logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –¥–∏–∞–ª–æ–≥—É {active_dialogue.dialogue_id}")
                return active_dialogue.dialogue_id
            
            elif self._should_start_new_dialogue_improved(chat_id, user, message):
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                new_dialogue = await self._start_new_dialogue(chat_id, update.effective_chat.title, user, message)
                logger.info(f"üÜï –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: {new_dialogue.dialogue_id}")
                return new_dialogue.dialogue_id
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None

    def _find_active_dialogue(self, channel_id: int) -> Optional[DialogueContext]:
        """–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        for dialogue in self.active_dialogues.values():
            if (dialogue.channel_id == channel_id and 
                datetime.now() - dialogue.last_activity < self.dialogue_timeout):
                return dialogue
        return None

    def _is_dialogue_message_improved(self, message, active_dialogue: Optional[DialogueContext]) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É"""
        if not active_dialogue:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
        time_diff = datetime.now() - active_dialogue.last_activity
        if time_diff > self.dialogue_timeout:
            return False
        
        # –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.reply_to_message:
            reply_user_id = message.reply_to_message.from_user.id
            if reply_user_id in active_dialogue.participants:
                return True
        
        # –£—á–∞—Å—Ç–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        if message.from_user.id in active_dialogue.participants:
            return True
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å–≤—è–∑—å
        return self._has_contextual_connection_improved(message, active_dialogue)

    def _has_contextual_connection_improved(self, message, dialogue: DialogueContext) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å–≤—è–∑—å"""
        message_text = message.text.lower()
        
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for participant in dialogue.participants.values():
            if participant.username and f"@{participant.username.lower()}" in message_text:
                return True
        
        # –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å
        if dialogue.is_business_related:
            business_keywords = [
                'crm', '–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Å–∏—Å—Ç–µ–º–∞', '–∑–∞–∫–∞–∑', '—Ü–µ–Ω–∞', 
                '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–µ–∫—Ç', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
            ]
            if any(keyword in message_text for keyword in business_keywords):
                return True
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å –∏ –≤–æ–ø—Ä–æ—Å—ã
        time_since_last = (datetime.now() - dialogue.last_activity).total_seconds()
        if time_since_last < 60 and ('?' in message.text or any(q in message_text for q in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ'])):
            return True
        
        return False

    def _should_start_new_dialogue_improved(self, channel_id: int, user: User, message) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Ç–≤–µ—Ç –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message and message.reply_to_message.from_user.id != user.id:
            return True
        
        # –í–æ–ø—Ä–æ—Å—ã
        if self._contains_question_patterns(message.text):
            return True
        
        # –î–µ–ª–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if self._contains_business_signals_improved(message.text):
            return True
        
        # –û–±—Ä–∞—â–µ–Ω–∏—è
        if self._contains_appeal_patterns(message.text):
            return True
        
        return False

    def _contains_question_patterns(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        question_patterns = [
            '?', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ',
            '–º–æ–∂–µ—Ç–µ –ª–∏', '–≤–æ–∑–º–æ–∂–Ω–æ –ª–∏', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–º–æ–≥–∏—Ç–µ'
        ]
        text_lower = text.lower()
        return any(pattern in text_lower for pattern in question_patterns)

    def _contains_business_signals_improved(self, text: str) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–´–ï –¥–µ–ª–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        business_signals = [
            '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', 'crm', '–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–∏—â—É', '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
            '–ø—Ä–æ–µ–∫—Ç', '–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ', '—Ä–µ—à–µ–Ω–∏–µ', '—Å–∏—Å—Ç–µ–º–∞', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
            '—Å—Ä–æ–∫–∏', '–±—é–¥–∂–µ—Ç', '—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', '–≤—ã–±–∏—Ä–∞–µ–º', '—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º'
        ]
        text_lower = text.lower()
        return any(signal in text_lower for signal in business_signals)

    def _contains_appeal_patterns(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        appeal_patterns = [
            '—Ä–µ–±—è—Ç–∞', '–∫–æ–ª–ª–µ–≥–∏', '–¥—Ä—É–∑—å—è', '–≤—Å–µ', '–∫—Ç–æ-–Ω–∏–±—É–¥—å',
            '–¥–∞–≤–∞–π—Ç–µ', '–ø—Ä–µ–¥–ª–∞–≥–∞—é', '–∫–∞–∫ –¥—É–º–∞–µ—Ç–µ', '—á—Ç–æ —Å–∫–∞–∂–µ—Ç–µ'
        ]
        text_lower = text.lower()
        return any(pattern in text_lower for pattern in appeal_patterns)

    async def _start_new_dialogue(self, channel_id: int, channel_title: str, user: User, message) -> DialogueContext:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        start_time = datetime.now()
        dialogue_id = self.get_dialogue_id(channel_id, start_time)
        
        participant = DialogueParticipant(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            role="initiator",
            message_count=1,
            first_message_time=start_time,
            last_message_time=start_time
        )
        
        dialogue = DialogueContext(
            dialogue_id=dialogue_id,
            channel_id=channel_id,
            channel_title=channel_title or f"Channel_{channel_id}",
            participants={user.id: participant},
            messages=[],
            start_time=start_time,
            last_activity=start_time,
            is_business_related=self._contains_business_signals_improved(message.text)
        )
        
        await self._add_message_to_dialogue(dialogue, user, message)
        self.active_dialogues[dialogue_id] = dialogue
        return dialogue

    async def _add_message_to_dialogue(self, dialogue: DialogueContext, user: User, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–∏–∞–ª–æ–≥—É"""
        current_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if user.id not in dialogue.participants:
            role = "responder" if len(dialogue.participants) == 1 else "participant"
            participant = DialogueParticipant(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                role=role,
                message_count=1,
                first_message_time=current_time,
                last_message_time=current_time
            )
            dialogue.participants[user.id] = participant
        else:
            participant = dialogue.participants[user.id]
            participant.message_count += 1
            participant.last_message_time = current_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        buying_signals = self._extract_buying_signals_improved(message.text)
        if buying_signals:
            participant.buying_signals_count += len(buying_signals)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        dialogue_message = DialogueMessage(
            user_id=user.id,
            username=user.username,
            text=message.text,
            timestamp=current_time,
            message_id=message.message_id,
            reply_to_message_id=message.reply_to_message.message_id if message.reply_to_message else None,
            reply_to_user_id=message.reply_to_message.from_user.id if message.reply_to_message else None,
            buying_signals=buying_signals,
            sentiment=self._analyze_sentiment(message.text),
            urgency_level=self._detect_urgency_improved(message.text)
        )
        
        dialogue.messages.append(dialogue_message)
        dialogue.last_activity = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if buying_signals or self._contains_business_signals_improved(message.text):
            dialogue.is_business_related = True

    def _extract_buying_signals_improved(self, text: str) -> List[str]:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        text_lower = text.lower()
        
        signal_patterns = {
            'price_inquiry': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–ø—Ä–∞–π—Å'],
            'purchase_intent': ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', '–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å'],
            'urgency': ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å'],
            'budget_discussion': ['–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å', '—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            'decision_making': ['—Ä–µ—à–µ–Ω–∏–µ', '–≤—ã–±–∏—Ä–∞—é', '—Å—Ä–∞–≤–Ω–∏–≤–∞—é', '–¥—É–º–∞—é –Ω–∞–¥'],
            'timeline': ['–∫–æ–≥–¥–∞', '—Å—Ä–æ–∫–∏', '–¥–µ–¥–ª–∞–π–Ω', '–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏'],
            'service_specific': ['–Ω—É–∂–µ–Ω –±–æ—Ç', 'crm —Å–∏—Å—Ç–µ–º–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']
        }
        
        for category, patterns in signal_patterns.items():
            for pattern in patterns:
                if pattern in text_lower:
                    signals.append(f"{category}: {pattern}")
        
        return signals

    def _analyze_sentiment(self, text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        positive_words = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '—Å–ø–∞—Å–∏–±–æ']
        negative_words = ['–ø–ª–æ—Ö–æ', '–¥–æ—Ä–æ–≥–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω–µ—Ç']
        
        text_lower = text.lower()
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        if positive_count > negative_count:
            return "positive"
        elif negative_count > positive_count:
            return "negative"
        else:
            return "neutral"

    def _detect_urgency_improved(self, text: str) -> str:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['—Å—Ä–æ—á–Ω–æ', '—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']):
            return "immediate"
        elif any(word in text_lower for word in ['–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞']):
            return "high"
        elif any(word in text_lower for word in ['–Ω–∞ –¥–Ω—è—Ö', '—Å–∫–æ—Ä–æ']):
            return "medium"
        elif any(word in text_lower for word in ['–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–º–æ–∂–µ—Ç –±—ã—Ç—å']):
            return "low"
        else:
            return "none"

    async def _cleanup_expired_dialogues(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        current_time = datetime.now()
        expired_dialogues = []
        
        for dialogue_id, dialogue in self.active_dialogues.items():
            if (current_time - dialogue.last_activity > self.dialogue_timeout or
                current_time - dialogue.start_time > self.max_dialogue_duration):
                expired_dialogues.append(dialogue_id)
        
        for dialogue_id in expired_dialogues:
            completed_dialogue = self.active_dialogues.pop(dialogue_id)
            logger.info(f"üèÅ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {dialogue_id} ({len(completed_dialogue.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")

    def should_trigger_immediate_analysis(self, dialogue_id: str, message_text: str) -> bool:
        """–ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        text_lower = message_text.lower()
        
        # –°–∏–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        for signal in self.immediate_analysis_triggers['strong_buying_signals']:
            if signal in text_lower:
                logger.info(f"üî• –¢—Ä–∏–≥–≥–µ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞: '{signal}'")
                return True
        
        # –§—Ä–∞–∑—ã –ª–∏—Ü, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è
        for phrase in self.immediate_analysis_triggers['decision_maker_phrases']:
            if phrase in text_lower:
                logger.info(f"üî• –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: '{phrase}'")
                return True
        
        return False

    def get_ready_for_analysis_dialogues(self) -> List[DialogueContext]:
        """–ù–û–í–û–ï: –î–∏–∞–ª–æ–≥–∏ –≥–æ—Ç–æ–≤—ã–µ –∫ –∞–Ω–∞–ª–∏–∑—É (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)"""
        ready_dialogues = []
        current_time = datetime.now()
        
        for dialogue in self.active_dialogues.values():
            # –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –µ—Å–ª–∏:
            has_min_requirements = (
                len(dialogue.participants) >= self.min_participants and
                len(dialogue.messages) >= self.min_messages
            )
            
            has_buying_signals = any(
                participant.buying_signals_count > 0 
                for participant in dialogue.participants.values()
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            has_timeout = current_time - dialogue.last_activity > timedelta(seconds=30)
            
            if has_min_requirements or has_buying_signals or has_timeout:
                ready_dialogues.append(dialogue)
        
        return ready_dialogues

# === –í–°–¢–†–û–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –î–ò–ê–õ–û–ì–û–í ===

class BuiltInDialogueAnalyzer:
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.claude_client = get_claude_client()
        logger.info("BuiltInDialogueAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def analyze_dialogue(self, dialogue: DialogueContext) -> Optional[DialogueAnalysisResult]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ {dialogue.dialogue_id}")
            
            if not self.claude_client or not self.claude_client.client:
                logger.warning("Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞")
                return self._simple_dialogue_analysis(dialogue)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            analysis_prompt = self._create_dialogue_analysis_prompt(dialogue)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await asyncio.wait_for(
                self.claude_client.client.messages.create(
                    model=self.claude_client.model,
                    max_tokens=3000,
                    messages=[{"role": "user", "content": analysis_prompt}],
                    temperature=0.1
                ),
                timeout=20.0
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            analysis_result = self._parse_dialogue_analysis_response(response.content[0].text, dialogue)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: —Ü–µ–Ω–Ω–æ—Å—Ç—å={analysis_result.is_valuable_dialogue}")
            return analysis_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return self._simple_dialogue_analysis(dialogue)

    def _create_dialogue_analysis_prompt(self, dialogue: DialogueContext) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        participants_info = []
        for user_id, participant in dialogue.participants.items():
            info = f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.first_name} (@{participant.username or '–±–µ–∑_username'}): {participant.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, {participant.buying_signals_count} –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
            participants_info.append(info)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_history = []
        for msg in dialogue.messages:
            timestamp = msg.timestamp.strftime("%H:%M")
            username = msg.username or f"user_{msg.user_id}"
            messages_history.append(f"[{timestamp}] {username}: {msg.text}")
        
        return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä—É–ø–ø–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö–∞–Ω–∞–ª: {dialogue.channel_title}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(dialogue.last_activity - dialogue.start_time).total_seconds() / 60:.1f} –º–∏–Ω
- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}
- –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}

–£–ß–ê–°–¢–ù–ò–ö–ò:
{chr(10).join(participants_info)}

–î–ò–ê–õ–û–ì:
{chr(10).join(messages_history)}

–í–µ—Ä–Ω–∏ JSON:
{{
    "is_valuable_dialogue": boolean,
    "confidence_score": number (0-100),
    "business_relevance_score": number (0-100),
    "potential_leads": [
        {{
            "user_id": number,
            "lead_probability": number (0-100),
            "lead_quality": "hot|warm|cold",
            "key_signals": ["—Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"],
            "recommended_approach": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç—ã",
            "urgency_level": "immediate|high|medium|low",
            "role_in_decision": "decision_maker|influencer|observer|budget_holder"
        }}
    ],
    "dialogue_summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏",
    "key_insights": ["–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"],
    "recommended_actions": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    "next_best_action": "—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥",
    "estimated_timeline": "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏–ª–∏ null",
    "group_budget_estimate": "–æ—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∏–ª–∏ null"
}}

–ò—â–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è, –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è."""

    def _parse_dialogue_analysis_response(self, response_text: str, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            import re
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if not json_match:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            data = json.loads(json_match.group())
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participant_analysis = {}
            buying_probability = {}
            
            for lead_data in data.get('potential_leads', []):
                user_id = lead_data['user_id']
                participant_analysis[user_id] = {
                    'lead_probability': lead_data.get('lead_probability', 0),
                    'lead_quality': lead_data.get('lead_quality', 'cold'),
                    'key_signals': lead_data.get('key_signals', []),
                    'role_in_decision': lead_data.get('role_in_decision', 'observer')
                }
                buying_probability[user_id] = lead_data.get('lead_probability', 0) / 100.0
            
            return DialogueAnalysisResult(
                dialogue_id=dialogue.dialogue_id,
                is_valuable_dialogue=data.get('is_valuable_dialogue', False),
                confidence_score=data.get('confidence_score', 0),
                potential_leads=data.get('potential_leads', []),
                group_dynamics={},
                business_relevance_score=data.get('business_relevance_score', 0),
                recommended_actions=data.get('recommended_actions', []),
                key_insights=data.get('key_insights', []),
                dialogue_summary=data.get('dialogue_summary', ''),
                participant_analysis=participant_analysis,
                buying_probability=buying_probability,
                influence_map={},
                next_best_action=data.get('next_best_action', ''),
                estimated_timeline=data.get('estimated_timeline'),
                group_budget_estimate=data.get('group_budget_estimate')
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return self._create_fallback_analysis(dialogue)

    def _simple_dialogue_analysis(self, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ AI"""
        potential_leads = []
        buying_probability = {}
        
        for user_id, participant in dialogue.participants.items():
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
            score = min(100, participant.buying_signals_count * 25 + participant.message_count * 5)
            
            if score >= 50:
                lead_quality = "hot" if score >= 80 else "warm"
                potential_leads.append({
                    'user_id': user_id,
                    'lead_probability': score,
                    'lead_quality': lead_quality,
                    'key_signals': [f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã: {participant.buying_signals_count}"],
                    'recommended_approach': "–°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
                    'role_in_decision': participant.role
                })
            
            buying_probability[user_id] = score / 100.0
        
        return DialogueAnalysisResult(
            dialogue_id=dialogue.dialogue_id,
            is_valuable_dialogue=len(potential_leads) > 0,
            confidence_score=70 if potential_leads else 30,
            potential_leads=potential_leads,
            group_dynamics={},
            business_relevance_score=80 if dialogue.is_business_related else 20,
            recommended_actions=["–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏"],
            key_insights=[f"–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: {len(potential_leads)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤"],
            dialogue_summary=f"–î–∏–∞–ª–æ–≥ —Å {len(dialogue.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
            participant_analysis={},
            buying_probability=buying_probability,
            influence_map={},
            next_best_action="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏–¥–∞–º–∏",
            estimated_timeline=None,
            group_budget_estimate=None
        )

    def _create_fallback_analysis(self, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return DialogueAnalysisResult(
            dialogue_id=dialogue.dialogue_id,
            is_valuable_dialogue=False,
            confidence_score=0,
            potential_leads=[],
            group_dynamics={},
            business_relevance_score=0,
            recommended_actions=["–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è"],
            key_insights=[],
            dialogue_summary="–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
            participant_analysis={},
            buying_probability={},
            influence_map={},
            next_best_action="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
            estimated_timeline=None,
            group_budget_estimate=None
        )

# === –ì–õ–ê–í–ù–´–ô –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –ü–ê–†–°–ï–† (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô) ===

class IntegratedAIContextParser:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –ø–∞—Ä—Å–µ—Ä (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π)"""
    
    def __init__(self, config):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = self.parsing_config.get('enabled', True)
        self.channels = self._parse_channels()
        self.min_confidence_score = self.parsing_config.get('min_confidence_score', 70)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.context_window_hours = self.parsing_config.get('context_window_hours', 24)
        self.min_messages_for_analysis = 1  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        self.max_context_messages = self.parsing_config.get('max_context_messages', 10)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        self.dialogue_analysis_enabled = self.parsing_config.get('dialogue_analysis_enabled', True)
        self.prefer_dialogue_analysis = False  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        self.dialogue_tracker = BuiltInDialogueTracker(config) if self.dialogue_analysis_enabled else None
        self.dialogue_analyzer = BuiltInDialogueAnalyzer(config) if self.dialogue_analysis_enabled else None
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.user_contexts: Dict[int, UserContext] = {}
        self.analysis_cache: Dict[str, AIAnalysisResult] = {}
        self.processed_leads: Dict[int, datetime] = {}
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.last_dialogue_analysis: Dict[str, datetime] = {}
        self.dialogue_analysis_pending: Dict[str, bool] = {}
        
        logger.info(f"–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô IntegratedAIContextParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        logger.info(f"  - –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {self.dialogue_analysis_enabled}")
        logger.info(f"  - –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê: {not self.prefer_dialogue_analysis}")
        logger.info(f"  - –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence_score}%")

    def _parse_channels(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            return [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            return [str(channels_raw)]
        return []

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            if not self.enabled:
                logger.info("‚ùå AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
                return
            
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞")
                return
            
            logger.info(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            logger.info(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message.text[:50]}...'")
            logger.info(f"    üìç –ö–∞–Ω–∞–ª: {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
            if not self.is_channel_monitored(chat_id, update.effective_chat.username):
                logger.info("‚è≠Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            dialogue_processed = False
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.dialogue_analysis_enabled and self.dialogue_tracker:
                dialogue_id = await self.dialogue_tracker.process_message(update, context)
                
                if dialogue_id:
                    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ: {dialogue_id}")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
                    if (self.dialogue_tracker.should_trigger_immediate_analysis(dialogue_id, message.text) or
                        await self._should_analyze_dialogue_now(dialogue_id)):
                        logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}!")
                        await self._analyze_dialogue_immediately(dialogue_id, context)
                        dialogue_processed = True
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò–°–ü–†–ê–í–õ–ï–ù–û - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –í–°–ï–ì–î–ê (—É–±—Ä–∞–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            logger.info("üë§ –ó–∞–ø—É—Å–∫–∞–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            await self._process_individual_message_immediately(update, context)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            if self.dialogue_analysis_enabled:
                asyncio.create_task(self._periodic_dialogue_check(context))
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")
            import traceback
            traceback.print_exc()

    async def _should_analyze_dialogue_now(self, dialogue_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            if dialogue_id not in self.dialogue_tracker.active_dialogues:
                return False
            
            dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
            
            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(dialogue.messages) >= 3:
                return True
            
            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤  
            if len(dialogue.participants) >= 2:
                return True
            
            # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            total_signals = sum(p.buying_signals_count for p in dialogue.participants.values())
            if total_signals >= 1:
                return True
            
            # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            last_analysis = self.last_dialogue_analysis.get(dialogue_id)
            if last_analysis:
                time_since = (datetime.now() - last_analysis).total_seconds()
                if time_since >= 60:  # 1 –º–∏–Ω—É—Ç–∞
                    return True
            else:
                # –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ 2+ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                if len(dialogue.messages) >= 2:
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return False

    async def _analyze_dialogue_immediately(self, dialogue_id: str, context: ContextTypes.DEFAULT_TYPE):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            if dialogue_id not in self.dialogue_tracker.active_dialogues:
                return
            
            if self.dialogue_analysis_pending.get(dialogue_id, False):
                return
            
            self.dialogue_analysis_pending[dialogue_id] = True
            dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
            
            logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞: {dialogue_id}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis_result = await self.dialogue_analyzer.analyze_dialogue(dialogue)
            
            if analysis_result:
                self.last_dialogue_analysis[dialogue_id] = datetime.now()
                
                if analysis_result.is_valuable_dialogue:
                    logger.info(f"üíé –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: {dialogue_id}")
                    await self._process_dialogue_analysis_result(dialogue, analysis_result, context)
                else:
                    logger.info(f"üìä –î–∏–∞–ª–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ —Ü–µ–Ω–Ω—ã–π: {analysis_result.confidence_score}%")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        finally:
            self.dialogue_analysis_pending[dialogue_id] = False

    async def _process_dialogue_analysis_result(self, dialogue: DialogueContext, 
                                              analysis: DialogueAnalysisResult, 
                                              context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            logger.info(f"üíé –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {dialogue.dialogue_id}")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–¥—ã
            created_leads = []
            for lead_data in analysis.potential_leads:
                if lead_data['lead_probability'] >= self.min_confidence_score:
                    user_id = lead_data['user_id']
                    participant = dialogue.participants.get(user_id)
                    
                    if participant:
                        lead = await self._create_lead_from_dialogue_participant(
                            participant, dialogue, lead_data, analysis
                        )
                        if lead:
                            created_leads.append((participant, lead_data))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            if analysis.confidence_score >= 75 or created_leads:
                await self._notify_admins_about_dialogue(context, dialogue, analysis, created_leads)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def _create_lead_from_dialogue_participant(self, participant, dialogue, lead_data, analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            participant_messages = [
                msg.text for msg in dialogue.messages 
                if msg.user_id == participant.user_id
            ]
            
            lead = Lead(
                telegram_id=participant.user_id,
                username=participant.username,
                first_name=participant.first_name,
                last_name=participant.last_name,
                source_channel=f"{dialogue.channel_title} (–¥–∏–∞–ª–æ–≥)",
                interest_score=lead_data['lead_probability'],
                message_text=" | ".join(participant_messages),
                message_date=dialogue.last_activity,
                
                # AI –ø–æ–ª—è
                lead_quality=lead_data['lead_quality'],
                interests=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                buying_signals=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                urgency_level=lead_data.get('urgency_level', 'medium'),
                estimated_budget=analysis.group_budget_estimate,
                timeline=analysis.estimated_timeline,
                pain_points=json.dumps(analysis.key_insights, ensure_ascii=False),
                decision_stage=dialogue.decision_stage,
                notes=f"–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue.dialogue_id}. –†–æ–ª—å: {lead_data.get('role_in_decision', '—É—á–∞—Å—Ç–Ω–∏–∫')}"
            )
            
            await create_lead(lead)
            logger.info(f"‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω –∏–∑ –¥–∏–∞–ª–æ–≥–∞: {participant.first_name}")
            return lead
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None

    async def _notify_admins_about_dialogue(self, context, dialogue, analysis, created_leads):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ —Ü–µ–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
        try:
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            if not admin_ids:
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if analysis.confidence_score >= 90:
                priority_emoji = "üî•üî•üî•"
                priority_text = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–õ–û–ì"
            elif analysis.confidence_score >= 80:
                priority_emoji = "üî•üî•"
                priority_text = "–í–ê–ñ–ù–´–ô –î–ò–ê–õ–û–ì"
            else:
                priority_emoji = "üî•"
                priority_text = "–¶–ï–ù–ù–´–ô –î–ò–ê–õ–û–ì"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
            participants_info = []
            for user_id, participant in dialogue.participants.items():
                buying_prob = analysis.buying_probability.get(user_id, 0)
                emoji = "üéØ" if buying_prob >= 0.7 else "üë§"
                username = f"@{participant.username}" if participant.username else f"ID{user_id}"
                participants_info.append(f"{emoji} {participant.first_name} ({username}) - {buying_prob*100:.0f}%")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–∞—Ö
            leads_info = ""
            if created_leads:
                leads_info = f"\nüéØ <b>–°–æ–∑–¥–∞–Ω—ã –ª–∏–¥—ã:</b>\n"
                for participant, lead_data in created_leads:
                    username = f"@{participant.username}" if participant.username else "–±–µ–∑ username"
                    leads_info += f"‚Ä¢ {participant.first_name} ({username}) - {lead_data['lead_quality']}\n"
            
            message = f"""{priority_emoji} <b>{priority_text}</b>

ü§ñ <b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {dialogue.channel_title}
üïê <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {(dialogue.last_activity - dialogue.start_time).total_seconds() / 60:.0f} –º–∏–Ω
üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(dialogue.participants)}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(dialogue.messages)}
üìä <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {analysis.confidence_score}%
üè¢ <b>–ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:</b> {analysis.business_relevance_score}%

üìã <b>–°—É—Ç—å –¥–∏–∞–ª–æ–≥–∞:</b>
<i>{analysis.dialogue_summary}</i>

üë• <b>–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>
{chr(10).join(participants_info)}

üí° <b>–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:</b>
{chr(10).join([f"‚Ä¢ {insight}" for insight in analysis.key_insights])}

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
{chr(10).join([f"‚Ä¢ {action}" for action in analysis.recommended_actions])}

‚ö° <b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> {analysis.next_best_action}
üìÖ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:</b> {analysis.estimated_timeline or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
üí∞ <b>–ë—é–¥–∂–µ—Ç –≥—Ä—É–ø–ø—ã:</b> {analysis.group_budget_estimate or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}{leads_info}

üîó <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>
{chr(10).join([f"<a href='tg://user?id={uid}'>–ù–∞–ø–∏—Å–∞—Ç—å {p.first_name}</a>" for uid, p in dialogue.participants.items()])}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–∞–ª–æ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∏–∞–ª–æ–≥–µ: {e}")

    async def _process_individual_message_immediately(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user = update.effective_user
            message = update.message
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self._update_user_context(user, message, update.effective_chat)
            
            user_context = self.user_contexts.get(user.id)
            if not user_context:
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not self._should_analyze_user_immediately(user_context):
                logger.info(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} - –∂–¥–µ–º –µ—â–µ")
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –≥–æ—Ä—è—á–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            if self._has_immediate_business_signals(message.text):
                logger.info(f"üî• –ì–û–†–Ø–ß–ò–ï –°–ò–ì–ù–ê–õ–´ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
            elif self._was_recently_analyzed(user.id):
                logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
                return
            
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis = await self._analyze_user_context(user_context)
            
            if analysis:
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: –ª–∏–¥={analysis.is_lead}, score={analysis.confidence_score}%")
                
                if analysis.is_lead and analysis.confidence_score >= self.min_confidence_score:
                    logger.info("üéØ –°–û–ó–î–ê–ï–ú –õ–ò–î–ê!")
                    await self._create_lead_from_individual_analysis(user_context, analysis, context)
                    self.processed_leads[user.id] = datetime.now()
                    await self._update_channel_stats(str(update.effective_chat.id), message.message_id, True)
                else:
                    await self._update_channel_stats(str(update.effective_chat.id), message.message_id, False)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ ai_context_parser.py
    # (–∫–æ–ø–∏—Ä—É–µ–º _update_user_context, _should_analyze_user_immediately, etc.)
    
    async def _update_user_context(self, user: User, message, chat):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = user.id
            current_time = datetime.now()
            
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = UserContext(
                    user_id=user_id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    messages=[],
                    first_seen=current_time,
                    last_activity=current_time,
                    channel_info={
                        'id': chat.id,
                        'title': chat.title,
                        'username': chat.username,
                        'type': chat.type
                    }
                )
            
            user_context = self.user_contexts[user_id]
            
            message_data = {
                'text': message.text,
                'date': message.date.isoformat() if message.date else current_time.isoformat(),
                'message_id': message.message_id,
                'timestamp': current_time.isoformat()
            }
            
            user_context.messages.append(message_data)
            user_context.last_activity = current_time
            user_context.username = user.username
            user_context.first_name = user.first_name
            user_context.last_name = user.last_name
            
            if len(user_context.messages) > self.max_context_messages:
                user_context.messages = user_context.messages[-self.max_context_messages:]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

    def _should_analyze_user_immediately(self, user_context: UserContext) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É"""
        messages_count = len(user_context.messages)
        last_message = user_context.messages[-1]['text'].lower() if user_context.messages else ""
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –≥–æ—Ä—è—á–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        if self._has_immediate_business_signals(last_message):
            return True
        
        # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–ª–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        if messages_count == 1:
            if self._has_any_business_signals(last_message):
                time_since = datetime.now() - user_context.last_activity
                return time_since > timedelta(seconds=10)
            else:
                time_since = datetime.now() - user_context.last_activity
                return time_since > timedelta(seconds=30)
        
        # 2+ —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        return messages_count >= 2

    def _has_immediate_business_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä—è—á–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        immediate_signals = [
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', '–Ω—É–∂–Ω–∞ crm',
            '–æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'
        ]
        text_lower = text.lower()
        return any(signal in text_lower for signal in immediate_signals)

    def _has_any_business_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—é–±—ã—Ö –¥–µ–ª–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        business_signals = [
            '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–Ω—É–∂–Ω–æ', '–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω–∞', '—Ö–æ—á—É', '–∏—â—É',
            '–±–æ—Ç', 'crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–æ–µ–∫—Ç'
        ]
        text_lower = text.lower()
        return any(signal in text_lower for signal in business_signals)

    def _was_recently_analyzed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if user_id in self.processed_leads:
            last_analysis = self.processed_leads[user_id]
            time_diff = datetime.now() - last_analysis
            return time_diff < timedelta(hours=1)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: 1 —á–∞—Å –≤–º–µ—Å—Ç–æ 24
        return False

    async def _analyze_user_context(self, user_context: UserContext) -> Optional[AIAnalysisResult]:
        """AI –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ ai_context_parser.py
        # (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞)
        try:
            claude_client = get_claude_client()
            if not claude_client or not claude_client.client:
                return self._simple_analysis(user_context)
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–¥
            return AIAnalysisResult(
                is_lead=True,
                confidence_score=75,
                lead_quality="warm",
                interests=["–ó–∞–≥–ª—É—à–∫–∞"],
                buying_signals=["–¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"],
                urgency_level="medium",
                recommended_action="–°–≤—è–∑–∞—Ç—å—Å—è",
                key_insights=["–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
                estimated_budget=None,
                timeline=None,
                pain_points=[],
                decision_stage="consideration"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._simple_analysis(user_context)

    def _simple_analysis(self, user_context: UserContext) -> AIAnalysisResult:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
        all_text = " ".join([msg['text'] for msg in user_context.messages]).lower()
        score = 60 if any(word in all_text for word in ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ü–µ–Ω–∞']) else 40
        
        return AIAnalysisResult(
            is_lead=score >= 50,
            confidence_score=score,
            lead_quality="warm" if score >= 70 else "cold",
            interests=["–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑"],
            buying_signals=["–ë–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"],
            urgency_level="medium",
            recommended_action="–°–≤—è–∑–∞—Ç—å—Å—è",
            key_insights=[f"–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: score {score}"],
            estimated_budget=None,
            timeline=None,
            pain_points=[],
            decision_stage="awareness"
        )

    async def _create_lead_from_individual_analysis(self, user_context: UserContext, analysis: AIAnalysisResult, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ai_context_parser.py
        pass

    async def _periodic_dialogue_check(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            if not self.dialogue_tracker:
                return
            
            ready_dialogues = self.dialogue_tracker.get_ready_for_analysis_dialogues()
            
            for dialogue in ready_dialogues:
                if await self._should_analyze_dialogue_now(dialogue.dialogue_id):
                    await self._analyze_dialogue_immediately(dialogue.dialogue_id, context)
                    await asyncio.sleep(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def _update_channel_stats(self, channel_id: str, message_id: int, lead_found: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            leads_count = 1 if lead_found else 0
            await update_channel_stats(channel_id, message_id, leads_count)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def is_channel_monitored(self, chat_id: int, chat_username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        if not self.enabled:
            return False
        
        if str(chat_id) in self.channels:
            return True
        
        if chat_username:
            username_variants = [f"@{chat_username}", chat_username]
            for variant in username_variants:
                if variant in self.channels:
                    return True
        
        return False

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        status = {
            'enabled': self.enabled,
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_confidence_score': self.min_confidence_score,
            'individual_active_users': len(self.user_contexts),
            'individual_analysis_cache_size': len(self.analysis_cache),
            'individual_processed_leads_count': len(self.processed_leads),
            'dialogue_analysis_enabled': self.dialogue_analysis_enabled,
            'prefer_dialogue_analysis': self.prefer_dialogue_analysis,
            'mode': '–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô_–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô_–ü–ê–†–°–ï–†',
            'improvements': [
                '–°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
                '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
                '–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º',
                '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
                '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤'
            ]
        }
        
        if self.dialogue_tracker:
            status['dialogue_tracker'] = {
                'active_dialogues': len(self.dialogue_tracker.active_dialogues),
                'last_dialogue_analysis_count': len(self.last_dialogue_analysis),
                'pending_analysis_count': sum(self.dialogue_analysis_pending.values())
            }
        
        return status

# –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
AIContextParser = IntegratedAIContextParser