"""
–ü–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes

from database.operations import (
    create_or_update_channel, get_active_channels, create_lead,
    update_channel_stats
)
from database.models import ParsedChannel, Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

class ChannelParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.enabled = self.parsing_config.get('enabled', True)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            self.channels = [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            self.channels = [str(channels_raw)]
        else:
            self.channels = []
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {channels_raw}")
        
        self.min_interest_score = self.parsing_config.get('min_interest_score', 60)
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã)
        self.processed_messages = set()
        
        logger.info(f"–ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
        try:
            if not self.enabled:
                return
            
            chat_id = update.effective_chat.id
            message_id = update.message.message_id
            user = update.effective_user
            message_text = update.message.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
            message_key = f"{chat_id}:{message_id}"
            if message_key in self.processed_messages:
                return
            
            self.processed_messages.add(message_key)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self.processed_messages) > 10000:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                old_messages = list(self.processed_messages)[:5000]
                for msg in old_messages:
                    self.processed_messages.discard(msg)
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat_id}: {message_text[:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            chat = update.effective_chat
            channel_identifier = str(chat_id)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ username –∫–∞–Ω–∞–ª–∞
            if chat.username:
                channel_identifier = f"@{chat.username}"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            interest_score = await self._analyze_message(message_text, channel_identifier)
            
            logger.info(f"–°–∫–æ—Ä –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {interest_score}")
            
            # –ï—Å–ª–∏ —Å–∫–æ—Ä –≤—ã—Å–æ–∫–∏–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ª–∏–¥
            if interest_score >= self.min_interest_score:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –ª–∏–¥ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if not await self._lead_exists(user.id, message_text):
                    lead = Lead(
                        telegram_id=user.id,
                        username=user.username,
                        first_name=user.first_name,
                        source_channel=channel_identifier,
                        interest_score=interest_score,
                        message_text=message_text,
                        message_date=update.message.date
                    )
                    
                    await create_lead(lead)
                    
                    logger.info(f"üéØ –ù–ê–ô–î–ï–ù –õ–ò–î: {user.first_name} (@{user.username}) - score: {interest_score}")
                    logger.info(f"–¢–µ–∫—Å—Ç: {message_text[:100]}...")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ
                    await self._notify_admins_about_lead(context, lead)
                else:
                    logger.debug(f"–õ–∏–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
            await self._update_channel_stats(channel_identifier, message_id, interest_score >= self.min_interest_score)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
            import traceback
            traceback.print_exc()

    async def _analyze_message(self, message_text: str, channel_identifier: str) -> int:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞"""
        try:
            claude_client = get_claude_client()
            if claude_client:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                score = await claude_client.analyze_potential_lead(message_text, channel_identifier)
                return score
            else:
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI
                return self._simple_lead_analysis(message_text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return self._simple_lead_analysis(message_text)

    def _simple_lead_analysis(self, message_text: str) -> int:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–∏–¥–∞ –±–µ–∑ AI"""
        if not message_text:
            return 0
        
        message_lower = message_text.lower()
        score = 0
        
        # –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ (–±–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º—ã)
        high_priority_words = [
            'crm', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ–¥–∞–∂–∏', '–∫–ª–∏–µ–Ω—Ç—ã', '–∑–∞—è–≤–∫–∏', 
            '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫', '–±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂', 'telegram bot',
            '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂–∏', '–≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂',
            '–ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', '–∫–æ–Ω–≤–µ—Ä—Å–∏—è', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂'
        ]
        
        # –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ä–µ—à–∞–µ–º
        problem_words = [
            '–Ω–µ —É—Å–ø–µ–≤–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å', '–º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫', '—Ç–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤',
            '–Ω—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞', '–∏—â—É —Ä–µ—à–µ–Ω–∏–µ', '–∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å',
            '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂', '—É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é',
            '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π'
        ]
        
        # –ù–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        buying_intent_words = [
            '–∏—â—É', '–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '–ø–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å',
            '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –ø–æ–∫—É–ø–∫—É', '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å', '–±—é–¥–∂–µ—Ç –µ—Å—Ç—å',
            '–≥–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å', '–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
        ]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        tech_words = [
            'api –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'webhook', 'chatbot', '–±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            '–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫', '–≤–æ—Ä–æ–Ω–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–º–µ—Ç—Ä–∏–∫–∏',
            'integration', 'automation'
        ]
        
        # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
        for word in high_priority_words:
            if word in message_lower:
                score += 40
                break  # –û–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        for word in problem_words:
            if word in message_lower:
                score += 35
                break
        
        for word in buying_intent_words:
            if word in message_lower:
                score += 30
                break
        
        for word in tech_words:
            if word in message_lower:
                score += 25
                break
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in message_lower for word in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫—Ç–æ –º–æ–∂–µ—Ç', '?']):
            score += 10
        
        # –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        irrelevant_words = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞—é', '–∫—É–ø–ª—é –∞–≤—Ç–æ', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å']
        for word in irrelevant_words:
            if word in message_lower:
                score -= 20
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–±—ã—á–Ω–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã)
        if len(message_text) < 20:
            score -= 10
        
        return max(0, min(100, score))

    async def _lead_exists(self, user_id: int, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏–¥–∞"""
        try:
            from database.operations import get_connection
            async with await get_connection() as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ—Ö–æ–∂–µ–º—É —Ç–µ–∫—Å—Ç—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
                cursor = await db.execute("""
                    SELECT id FROM leads 
                    WHERE telegram_id = ? 
                    AND created_at >= datetime('now', '-7 days')
                    LIMIT 1
                """, (user_id,))
                result = await cursor.fetchone()
                return result is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–∏–¥–∞: {e}")
            return False

    async def _update_channel_stats(self, channel_identifier: str, message_id: int, lead_found: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        try:
            leads_count = 1 if lead_found else 0
            await update_channel_stats(channel_identifier, message_id, leads_count)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")

    async def _notify_admins_about_lead(self, context: ContextTypes.DEFAULT_TYPE, lead: Lead):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ"""
        try:
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            
            if not admin_ids:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            username_text = f"@{lead.username}" if lead.username else "–±–µ–∑ username"
            message = f"""üéØ <b>–ù–û–í–´–ô –õ–ò–î!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {lead.first_name} ({username_text})
‚≠ê <b>–°–∫–æ—Ä:</b> {lead.interest_score}/100
üì∫ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {lead.source_channel}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> 
<i>{lead.message_text[:300]}...</i>

üîó <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> tg://user?id={lead.telegram_id}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {e}")

    async def initialize_channels(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for channel_identifier in self.channels:
                channel = ParsedChannel(
                    channel_username=channel_identifier,
                    channel_title=f"–ö–∞–Ω–∞–ª {channel_identifier}",
                    enabled=True
                )
                await create_or_update_channel(channel)
            
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ë–î")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")

    def get_parsing_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        return {
            'enabled': self.enabled,
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_score': self.min_interest_score,
            'processed_messages_count': len(self.processed_messages)
        }

    def is_channel_monitored(self, chat_id: int, chat_username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞"""
        if not self.enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
        if str(chat_id) in self.channels:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
        if chat_username:
            username_variants = [f"@{chat_username}", chat_username]
            for variant in username_variants:
                if variant in self.channels:
                    return True
        
        return False

    async def add_channel(self, channel_identifier: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if channel_identifier not in self.channels:
                self.channels.append(channel_identifier)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                channel = ParsedChannel(
                    channel_username=channel_identifier,
                    channel_title=f"–ö–∞–Ω–∞–ª {channel_identifier}",
                    enabled=True
                )
                await create_or_update_channel(channel)
                
                logger.info(f"–ö–∞–Ω–∞–ª {channel_identifier} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return True
            
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_identifier}: {e}")
            return False

    async def remove_channel(self, channel_identifier: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if channel_identifier in self.channels:
                self.channels.remove(channel_identifier)
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –≤ –ë–î
                from database.operations import get_connection
                async with await get_connection() as db:
                    await db.execute(
                        "UPDATE parsed_channels SET enabled = FALSE WHERE channel_username = ?",
                        (channel_identifier,)
                    )
                    await db.commit()
                
                logger.info(f"–ö–∞–Ω–∞–ª {channel_identifier} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return True
            
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_identifier}: {e}")
            return False