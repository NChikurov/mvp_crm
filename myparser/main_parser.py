"""
myparser/main_parser.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ø–∞—Ä—Å–µ—Ä
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –º–æ–¥—É–ª–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from dataclasses import dataclass
from telegram import Update, User
from telegram.ext import ContextTypes

from database.operations import create_lead, update_channel_stats
from database.models import Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

# === –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ===

@dataclass
class DialogueParticipant:
    """–£—á–∞—Å—Ç–Ω–∏–∫ –¥–∏–∞–ª–æ–≥–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    role: str = "participant"
    message_count: int = 0
    first_message_time: Optional[datetime] = None
    last_message_time: Optional[datetime] = None
    engagement_level: str = "low"
    buying_signals_count: int = 0
    influence_score: int = 0
    lead_probability: float = 0.0

@dataclass
class DialogueMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    user_id: int
    username: Optional[str]
    text: str
    timestamp: datetime
    message_id: int
    reply_to_message_id: Optional[int] = None
    reply_to_user_id: Optional[int] = None
    buying_signals: List[str] = None
    sentiment: str = "neutral"
    urgency_level: str = "none"

@dataclass
class DialogueContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    channel_id: int
    channel_title: str
    participants: Dict[int, DialogueParticipant]
    messages: List[DialogueMessage]
    start_time: datetime
    last_activity: datetime
    topic: Optional[str] = None
    dialogue_type: str = "discussion"
    is_business_related: bool = False
    overall_sentiment: str = "neutral"
    decision_stage: str = "awareness"
    group_buying_probability: float = 0.0

@dataclass
class DialogueAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
    dialogue_id: str
    is_valuable_dialogue: bool
    confidence_score: int
    potential_leads: List[Dict[str, Any]]
    business_relevance_score: int
    dialogue_summary: str
    key_insights: List[str]
    recommended_actions: List[str]
    next_best_action: str
    estimated_timeline: Optional[str]
    group_budget_estimate: Optional[str]
    participant_analysis: Dict[int, Dict[str, Any]]

@dataclass
class UserContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    messages: List[Dict[str, Any]]
    first_seen: datetime
    last_activity: datetime
    channel_info: Dict[str, Any]

@dataclass
class AIAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    is_lead: bool
    confidence_score: int
    lead_quality: str
    interests: List[str]
    buying_signals: List[str]
    urgency_level: str
    recommended_action: str
    key_insights: List[str]
    estimated_budget: Optional[str]
    timeline: Optional[str]
    pain_points: List[str]
    decision_stage: str

# === –¢–†–ï–ö–ï–† –î–ò–ê–õ–û–ì–û–í ===

class DialogueTracker:
    """–¢—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.active_dialogues: Dict[str, DialogueContext] = {}
        self.dialogue_timeout = timedelta(minutes=2)
        self.min_participants = 2
        self.min_messages = 2
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.buying_signals = [
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–Ω—É–∂–µ–Ω –±–æ—Ç', '–∑–∞–∫–∞–∑–∞—Ç—å crm', '—Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ', '–±—é–¥–∂–µ—Ç',
            '–ø–æ–∫—É–ø–∞–µ–º', '–ø–ª–∞–Ω–∏—Ä—É–µ–º –∫—É–ø–∏—Ç—å', '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É'
        ]
        
        logger.info("DialogueTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_dialogue_id(self, channel_id: int, start_time: datetime) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–∏–∞–ª–æ–≥–∞"""
        return f"dialogue_{channel_id}_{start_time.strftime('%Y%m%d_%H%M%S')}"

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                return None
            
            # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            await self._cleanup_expired_dialogues()
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            active_dialogue = self._find_active_dialogue(chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –¥–∏–∞–ª–æ–≥—É
            if active_dialogue and self._belongs_to_dialogue(message, active_dialogue, user):
                await self._add_message_to_dialogue(active_dialogue, user, message)
                logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –¥–∏–∞–ª–æ–≥—É {active_dialogue.dialogue_id}")
                return active_dialogue.dialogue_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            if self._should_start_new_dialogue(message, user):
                new_dialogue = await self._start_new_dialogue(chat_id, update.effective_chat.title, user, message)
                logger.info(f"üÜï –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: {new_dialogue.dialogue_id}")
                return new_dialogue.dialogue_id
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None

    def _find_active_dialogue(self, channel_id: int) -> Optional[DialogueContext]:
        """–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        for dialogue in self.active_dialogues.values():
            if (dialogue.channel_id == channel_id and 
                datetime.now() - dialogue.last_activity < self.dialogue_timeout):
                return dialogue
        return None

    def _belongs_to_dialogue(self, message, dialogue: DialogueContext, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–∏–∞–ª–æ–≥—É"""
        # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message:
            reply_user_id = message.reply_to_message.from_user.id
            if reply_user_id in dialogue.participants:
                return True
        
        # –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        if user.id in dialogue.participants:
            return True
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Å–≤—è–∑—å
        message_text = message.text.lower()
        if dialogue.is_business_related:
            business_keywords = ['crm', '–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '—Å–∏—Å—Ç–µ–º–∞', '–∑–∞–∫–∞–∑', '—Ü–µ–Ω–∞']
            if any(keyword in message_text for keyword in business_keywords):
                return True
        
        return False

    def _should_start_new_dialogue(self, message, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Ç–≤–µ—Ç –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.reply_to_message and message.reply_to_message.from_user.id != user.id:
            return True
        
        # –í–æ–ø—Ä–æ—Å—ã
        if self._is_question(message.text):
            return True
        
        # –î–µ–ª–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if self._has_business_signals(message.text):
            return True
        
        return False

    def _is_question(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        question_indicators = ['?', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–º–æ–∂–µ—Ç–µ']
        text_lower = text.lower()
        return any(indicator in text_lower for indicator in question_indicators)

    def _has_business_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        text_lower = text.lower()
        return any(signal in text_lower for signal in self.buying_signals)

    async def _start_new_dialogue(self, channel_id: int, channel_title: str, user: User, message) -> DialogueContext:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        start_time = datetime.now()
        dialogue_id = self.get_dialogue_id(channel_id, start_time)
        
        participant = DialogueParticipant(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            role="initiator",
            message_count=1,
            first_message_time=start_time,
            last_message_time=start_time
        )
        
        dialogue = DialogueContext(
            dialogue_id=dialogue_id,
            channel_id=channel_id,
            channel_title=channel_title or f"Channel_{channel_id}",
            participants={user.id: participant},
            messages=[],
            start_time=start_time,
            last_activity=start_time,
            is_business_related=self._has_business_signals(message.text)
        )
        
        await self._add_message_to_dialogue(dialogue, user, message)
        self.active_dialogues[dialogue_id] = dialogue
        return dialogue

    async def _add_message_to_dialogue(self, dialogue: DialogueContext, user: User, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–∏–∞–ª–æ–≥—É"""
        current_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if user.id not in dialogue.participants:
            role = "responder" if len(dialogue.participants) == 1 else "participant"
            participant = DialogueParticipant(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                role=role,
                message_count=1,
                first_message_time=current_time,
                last_message_time=current_time
            )
            dialogue.participants[user.id] = participant
        else:
            participant = dialogue.participants[user.id]
            participant.message_count += 1
            participant.last_message_time = current_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        buying_signals = self._extract_buying_signals(message.text)
        if buying_signals:
            participant.buying_signals_count += len(buying_signals)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        dialogue_message = DialogueMessage(
            user_id=user.id,
            username=user.username,
            text=message.text,
            timestamp=current_time,
            message_id=message.message_id,
            reply_to_message_id=message.reply_to_message.message_id if message.reply_to_message else None,
            reply_to_user_id=message.reply_to_message.from_user.id if message.reply_to_message else None,
            buying_signals=buying_signals,
            urgency_level=self._detect_urgency(message.text)
        )
        
        dialogue.messages.append(dialogue_message)
        dialogue.last_activity = current_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if buying_signals or self._has_business_signals(message.text):
            dialogue.is_business_related = True

    def _extract_buying_signals(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        text_lower = text.lower()
        
        signal_patterns = {
            'price_inquiry': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç'],
            'purchase_intent': ['–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Ö–æ—á—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏'],
            'urgency': ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è'],
            'budget_discussion': ['–±—é–¥–∂–µ—Ç', '–≥–æ—Ç–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å'],
            'service_specific': ['–Ω—É–∂–µ–Ω –±–æ—Ç', 'crm —Å–∏—Å—Ç–µ–º–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è']
        }
        
        for category, patterns in signal_patterns.items():
            for pattern in patterns:
                if pattern in text_lower:
                    signals.append(f"{category}: {pattern}")
        
        return signals

    def _detect_urgency(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['—Å—Ä–æ—á–Ω–æ', '—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ']):
            return "immediate"
        elif any(word in text_lower for word in ['–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞']):
            return "high"
        elif any(word in text_lower for word in ['–Ω–∞ –¥–Ω—è—Ö', '—Å–∫–æ—Ä–æ']):
            return "medium"
        else:
            return "none"

    async def _cleanup_expired_dialogues(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        current_time = datetime.now()
        expired_dialogues = []
        
        for dialogue_id, dialogue in self.active_dialogues.items():
            if current_time - dialogue.last_activity > self.dialogue_timeout:
                expired_dialogues.append(dialogue_id)
        
        for dialogue_id in expired_dialogues:
            completed_dialogue = self.active_dialogues.pop(dialogue_id)
            logger.info(f"üèÅ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {dialogue_id} ({len(completed_dialogue.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")

    def should_trigger_immediate_analysis(self, dialogue_id: str, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        text_lower = message_text.lower()
        return any(signal in text_lower for signal in self.buying_signals)

    def get_ready_for_analysis_dialogues(self) -> List[DialogueContext]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –∞–Ω–∞–ª–∏–∑—É"""
        ready_dialogues = []
        
        for dialogue in self.active_dialogues.values():
            if (len(dialogue.participants) >= self.min_participants and 
                len(dialogue.messages) >= self.min_messages):
                ready_dialogues.append(dialogue)
        
        return ready_dialogues

# === –ê–ù–ê–õ–ò–ó–ê–¢–û–† –î–ò–ê–õ–û–ì–û–í ===

class DialogueAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.claude_client = get_claude_client()
        logger.info("DialogueAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def analyze_dialogue(self, dialogue: DialogueContext) -> Optional[DialogueAnalysisResult]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ {dialogue.dialogue_id}")
            
            if self.claude_client and self.claude_client.client:
                return await self._ai_dialogue_analysis(dialogue)
            else:
                logger.warning("Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                return self._simple_dialogue_analysis(dialogue)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return self._simple_dialogue_analysis(dialogue)

    async def _ai_dialogue_analysis(self, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """AI –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        participants_info = []
        for user_id, participant in dialogue.participants.items():
            info = f"–£—á–∞—Å—Ç–Ω–∏–∫ {participant.first_name} (@{participant.username or '–±–µ–∑_username'}): {participant.message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, {participant.buying_signals_count} –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
            participants_info.append(info)
        
        messages_history = []
        for msg in dialogue.messages:
            timestamp = msg.timestamp.strftime("%H:%M")
            username = msg.username or f"user_{msg.user_id}"
            messages_history.append(f"[{timestamp}] {username}: {msg.text}")
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥—Ä—É–ø–ø–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.

–ö–û–ù–¢–ï–ö–°–¢:
- –ö–∞–Ω–∞–ª: {dialogue.channel_title}
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(dialogue.last_activity - dialogue.start_time).total_seconds() / 60:.1f} –º–∏–Ω
- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}
- –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}

–£–ß–ê–°–¢–ù–ò–ö–ò:
{chr(10).join(participants_info)}

–î–ò–ê–õ–û–ì:
{chr(10).join(messages_history)}

–í–µ—Ä–Ω–∏ JSON:
{{
    "is_valuable_dialogue": boolean,
    "confidence_score": number (0-100),
    "business_relevance_score": number (0-100),
    "potential_leads": [
        {{
            "user_id": number,
            "lead_probability": number (0-100),
            "lead_quality": "hot|warm|cold",
            "key_signals": ["—Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"],
            "role_in_decision": "decision_maker|influencer|observer|budget_holder"
        }}
    ],
    "dialogue_summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏",
    "key_insights": ["–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã"],
    "recommended_actions": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
    "next_best_action": "—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥",
    "estimated_timeline": "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏–ª–∏ null",
    "group_budget_estimate": "–æ—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∏–ª–∏ null"
}}"""

        try:
            response = await asyncio.wait_for(
                self.claude_client.client.messages.create(
                    model=self.claude_client.model,
                    max_tokens=3000,
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.1
                ),
                timeout=20.0
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            response_text = response.content[0].text
            return self._parse_ai_response(response_text, dialogue)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self._simple_dialogue_analysis(dialogue)

    def _parse_ai_response(self, response_text: str, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–ü–∞—Ä—Å–∏–Ω–≥ AI –æ—Ç–≤–µ—Ç–∞"""
        try:
            import re
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if not json_match:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            data = json.loads(json_match.group())
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participant_analysis = {}
            for lead_data in data.get('potential_leads', []):
                user_id = lead_data['user_id']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                if user_id in dialogue.participants:
                    participant = dialogue.participants[user_id]
                    participant.lead_probability = lead_data.get('lead_probability', 0) / 100.0
                    
                    participant_analysis[user_id] = {
                        'lead_probability': lead_data.get('lead_probability', 0),
                        'lead_quality': lead_data.get('lead_quality', 'cold'),
                        'key_signals': lead_data.get('key_signals', []),
                        'role_in_decision': lead_data.get('role_in_decision', 'observer')
                    }
            
            return DialogueAnalysisResult(
                dialogue_id=dialogue.dialogue_id,
                is_valuable_dialogue=data.get('is_valuable_dialogue', False),
                confidence_score=data.get('confidence_score', 0),
                potential_leads=data.get('potential_leads', []),
                business_relevance_score=data.get('business_relevance_score', 0),
                dialogue_summary=data.get('dialogue_summary', ''),
                key_insights=data.get('key_insights', []),
                recommended_actions=data.get('recommended_actions', []),
                next_best_action=data.get('next_best_action', ''),
                estimated_timeline=data.get('estimated_timeline'),
                group_budget_estimate=data.get('group_budget_estimate'),
                participant_analysis=participant_analysis
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._simple_dialogue_analysis(dialogue)

    def _simple_dialogue_analysis(self, dialogue: DialogueContext) -> DialogueAnalysisResult:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI"""
        potential_leads = []
        participant_analysis = {}
        
        for user_id, participant in dialogue.participants.items():
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
            score = min(100, participant.buying_signals_count * 30 + participant.message_count * 10)
            
            if score >= 50:
                lead_quality = "hot" if score >= 80 else "warm"
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                participant.lead_probability = score / 100.0
                
                potential_leads.append({
                    'user_id': user_id,
                    'lead_probability': score,
                    'lead_quality': lead_quality,
                    'key_signals': [f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã: {participant.buying_signals_count}"],
                    'role_in_decision': participant.role
                })
                
                participant_analysis[user_id] = {
                    'lead_probability': score,
                    'lead_quality': lead_quality,
                    'key_signals': [f"–°–∏–≥–Ω–∞–ª—ã: {participant.buying_signals_count}"],
                    'role_in_decision': participant.role
                }
        
        return DialogueAnalysisResult(
            dialogue_id=dialogue.dialogue_id,
            is_valuable_dialogue=len(potential_leads) > 0,
            confidence_score=75 if potential_leads else 30,
            potential_leads=potential_leads,
            business_relevance_score=80 if dialogue.is_business_related else 20,
            dialogue_summary=f"–î–∏–∞–ª–æ–≥ —Å {len(dialogue.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ {dialogue.channel_title}",
            key_insights=[f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(potential_leads)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤"],
            recommended_actions=["–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ª–∏–¥–∞–º–∏"],
            next_best_action="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ª–∏–¥–∞–º–∏",
            estimated_timeline="1-2 –Ω–µ–¥–µ–ª–∏",
            group_budget_estimate="–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
            participant_analysis=participant_analysis
        )

# === –ì–õ–ê–í–ù–´–ô –ü–ê–†–°–ï–† ===

class UnifiedAIParser:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π AI –ø–∞—Ä—Å–µ—Ä"""
    
    def __init__(self, config):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = self.parsing_config.get('enabled', True)
        self.channels = self._parse_channels()
        self.min_confidence_score = self.parsing_config.get('min_confidence_score', 70)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.dialogue_analysis_enabled = self.parsing_config.get('dialogue_analysis_enabled', True)
        self.dialogue_tracker = DialogueTracker(config) if self.dialogue_analysis_enabled else None
        self.dialogue_analyzer = DialogueAnalyzer(config) if self.dialogue_analysis_enabled else None
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.user_contexts: Dict[int, UserContext] = {}
        self.processed_leads: Dict[int, datetime] = {}
        self.last_dialogue_analysis: Dict[str, datetime] = {}
        
        logger.info(f"UnifiedAIParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        logger.info(f"  - –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {self.dialogue_analysis_enabled}")
        logger.info(f"  - –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence_score}%")

    def _parse_channels(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤"""
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            return [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            return [str(channels_raw)]
        return []

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not self.enabled:
                return
            
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                return
            
            logger.info(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            logger.info(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message.text[:50]}...'")
            logger.info(f"    üìç –ö–∞–Ω–∞–ª: {chat_id}")
            
            if not self.is_channel_monitored(chat_id, update.effective_chat.username):
                logger.info("‚è≠Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            dialogue_processed = False
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
            if self.dialogue_analysis_enabled and self.dialogue_tracker:
                dialogue_id = await self.dialogue_tracker.process_message(update, context)
                
                if dialogue_id:
                    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ: {dialogue_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
                    if (self.dialogue_tracker.should_trigger_immediate_analysis(dialogue_id, message.text) or
                        await self._should_analyze_dialogue_now(dialogue_id)):
                        logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}!")
                        await self._analyze_dialogue_immediately(dialogue_id, context)
                        dialogue_processed = True
            
            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if not dialogue_processed:
                logger.info("üë§ –ó–∞–ø—É—Å–∫–∞–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                await self._process_individual_message(update, context)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")

    async def _should_analyze_dialogue_now(self, dialogue_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞ –∫ –∞–Ω–∞–ª–∏–∑—É"""
        if dialogue_id not in self.dialogue_tracker.active_dialogues:
            return False
        
        dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
        
        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (len(dialogue.participants) >= 2 and len(dialogue.messages) >= 2):
            return True
        
        # –ï—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        total_signals = sum(p.buying_signals_count for p in dialogue.participants.values())
        if total_signals >= 1:
            return True
        
        return False

    async def _analyze_dialogue_immediately(self, dialogue_id: str, context: ContextTypes.DEFAULT_TYPE):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            if dialogue_id not in self.dialogue_tracker.active_dialogues:
                return
            
            dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
            logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞: {dialogue_id}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis_result = await self.dialogue_analyzer.analyze_dialogue(dialogue)
            
            if analysis_result:
                self.last_dialogue_analysis[dialogue_id] = datetime.now()
                
                if analysis_result.is_valuable_dialogue:
                    logger.info(f"üíé –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: {dialogue_id}")
                    await self._process_dialogue_result(dialogue, analysis_result, context)
                else:
                    logger.info(f"üìä –î–∏–∞–ª–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {analysis_result.confidence_score}%")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")

    async def _process_dialogue_result(self, dialogue: DialogueContext, 
                                     analysis: DialogueAnalysisResult, 
                                     context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            logger.info(f"üíé –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {dialogue.dialogue_id}")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–¥—ã
            created_leads = []
            for lead_data in analysis.potential_leads:
                if lead_data['lead_probability'] >= self.min_confidence_score:
                    user_id = lead_data['user_id']
                    participant = dialogue.participants.get(user_id)
                    
                    if participant:
                        lead = await self._create_dialogue_lead(participant, dialogue, lead_data, analysis)
                        if lead:
                            created_leads.append((participant, lead_data))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await self._notify_admins_about_dialogue(context, dialogue, analysis, created_leads)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    async def _create_dialogue_lead(self, participant, dialogue, lead_data, analysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            participant_messages = [
                msg.text for msg in dialogue.messages 
                if msg.user_id == participant.user_id
            ]
            
            lead = Lead(
                telegram_id=participant.user_id,
                username=participant.username,
                first_name=participant.first_name,
                last_name=participant.last_name,
                source_channel=f"{dialogue.channel_title} (–¥–∏–∞–ª–æ–≥)",
                interest_score=lead_data['lead_probability'],
                message_text=" | ".join(participant_messages),
                message_date=dialogue.last_activity,
                lead_quality=lead_data['lead_quality'],
                interests=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                buying_signals=json.dumps(lead_data.get('key_signals', []), ensure_ascii=False),
                urgency_level="medium",
                estimated_budget=analysis.group_budget_estimate,
                timeline=analysis.estimated_timeline,
                notes=f"–î–∏–∞–ª–æ–≥ {dialogue.dialogue_id}. –†–æ–ª—å: {lead_data.get('role_in_decision', '—É—á–∞—Å—Ç–Ω–∏–∫')}"
            )
            
            await create_lead(lead)
            logger.info(f"‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω: {participant.first_name}")
            return lead
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {e}")
            return None

    async def _notify_admins_about_dialogue(self, context, dialogue, analysis, created_leads):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –¥–∏–∞–ª–æ–≥–µ"""
        try:
            admin_ids = self.config.get('bot', {}).get('admin_ids', [])
            if not admin_ids:
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_info = []
            for user_id, participant in dialogue.participants.items():
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                prob = 0
                for lead_data in analysis.potential_leads:
                    if lead_data['user_id'] == user_id:
                        prob = lead_data.get('lead_probability', 0)
                        break
                
                emoji = "üéØ" if prob >= 70 else "üë§"
                username = f"@{participant.username}" if participant.username else f"ID{user_id}"
                participants_info.append(f"{emoji} {participant.first_name} ({username}) - {prob}%")
            
            message = f"""üî• –¶–ï–ù–ù–´–ô –î–ò–ê–õ–û–ì

ü§ñ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô AI –ê–ù–ê–õ–ò–ó –î–ò–ê–õ–û–ì–ê

üì∫ –ö–∞–Ω–∞–ª: {dialogue.channel_title}
üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(dialogue.last_activity - dialogue.start_time).total_seconds() / 60:.0f} –º–∏–Ω
üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}%
üè¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {analysis.business_relevance_score}%

üìã –°—É—Ç—å –¥–∏–∞–ª–æ–≥–∞:
{analysis.dialogue_summary}

üë• –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
{chr(10).join(participants_info)}

üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:
{chr(10).join([f"‚Ä¢ {insight}" for insight in analysis.key_insights])}

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{chr(10).join([f"‚Ä¢ {action}" for action in analysis.recommended_actions])}

‚ö° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: {analysis.next_best_action}
üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: {analysis.estimated_timeline or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}
üí∞ –ë—é–¥–∂–µ—Ç –≥—Ä—É–ø–ø—ã: {analysis.group_budget_estimate or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}"""

            if created_leads:
                message += f"\n\nüéØ –°–æ–∑–¥–∞–Ω—ã –ª–∏–¥—ã:\n"
                for participant, lead_data in created_leads:
                    username = f"@{participant.username}" if participant.username else "–±–µ–∑ username"
                    message += f"‚Ä¢ {participant.first_name} ({username}) - {lead_data['lead_quality']}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–∏–∞–ª–æ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def _process_individual_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user = update.effective_user
            message = update.message
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if self._has_strong_business_signals(message.text):
                logger.info("üî• –°–∏–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª—ã - —Å–æ–∑–¥–∞–µ–º –ª–∏–¥")
                
                lead = Lead(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    source_channel=update.effective_chat.title or f"Channel_{update.effective_chat.id}",
                    interest_score=85,
                    message_text=message.text,
                    message_date=datetime.now(),
                    lead_quality="hot",
                    urgency_level="high",
                    notes="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
                )
                
                await create_lead(lead)
                logger.info(f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–¥ —Å–æ–∑–¥–∞–Ω: {user.first_name}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def _has_strong_business_signals(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–∏–≥–Ω–∞–ª–æ–≤"""
        strong_signals = [
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–Ω—É–∂–µ–Ω –±–æ—Ç', '–∑–∞–∫–∞–∑–∞—Ç—å crm', '–±—é–¥–∂–µ—Ç', '–ø–æ–∫—É–ø–∞–µ–º'
        ]
        text_lower = text.lower()
        return any(signal in text_lower for signal in strong_signals)

    def is_channel_monitored(self, chat_id: int, chat_username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        if not self.enabled:
            return False
        
        if str(chat_id) in self.channels:
            return True
        
        if chat_username:
            username_variants = [f"@{chat_username}", chat_username]
            for variant in username_variants:
                if variant in self.channels:
                    return True
        
        return False

    def get_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"""
        status = {
            'enabled': self.enabled,
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_confidence_score': self.min_confidence_score,
            'individual_active_users': len(self.user_contexts),
            'individual_processed_leads_count': len(self.processed_leads),
            'dialogue_analysis_enabled': self.dialogue_analysis_enabled,
            'mode': 'unified_fixed'
        }
        
        if self.dialogue_tracker:
            status['dialogue_tracker'] = {
                'active_dialogues': len(self.dialogue_tracker.active_dialogues),
                'min_participants': self.dialogue_tracker.min_participants,
                'min_messages': self.dialogue_tracker.min_messages,
                'dialogue_timeout_minutes': self.dialogue_tracker.dialogue_timeout.total_seconds() / 60
            }
        
        return status

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
AIContextParser = UnifiedAIParser
IntegratedAIContextParser = UnifiedAIParser