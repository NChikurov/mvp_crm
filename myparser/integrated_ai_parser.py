"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: myparser/integrated_ai_parser.py
–§–∏–∫—Å—ã: –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —Ç—Ä–∏–≥–≥–µ—Ä—ã
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from dataclasses import dataclass, asdict
from telegram import Update, User
from telegram.ext import ContextTypes

from database.operations import create_lead, update_channel_stats
from database.models import Lead
from ai.claude_client import get_claude_client

logger = logging.getLogger(__name__)

class IntegratedAIContextParser:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –ø–∞—Ä—Å–µ—Ä —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self, config):
        self.config = config
        self.parsing_config = config.get('parsing', {})
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled = self.parsing_config.get('enabled', True)
        self.channels = self._parse_channels()
        self.min_confidence_score = self.parsing_config.get('min_confidence_score', 70)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        self.context_window_hours = self.parsing_config.get('context_window_hours', 24)
        self.min_messages_for_analysis = self.parsing_config.get('min_messages_for_analysis', 1)
        self.max_context_messages = self.parsing_config.get('max_context_messages', 10)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–º–Ω—ã–º–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
        self.dialogue_analysis_enabled = self.parsing_config.get('dialogue_analysis_enabled', True)
        self.prefer_dialogue_analysis = self.parsing_config.get('prefer_dialogue_analysis', True)
        
        # –ù–û–í–û–ï: –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        self.dialogue_analysis_triggers = {
            'message_count': 3,      # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π
            'participant_count': 2,  # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ 2–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            'buying_signals': 1,     # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏ –ª—é–±–æ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–∏–≥–Ω–∞–ª–µ
            'time_window': 30,       # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        }
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π)
        from .dialogue_analyzer import FixedDialogueTracker, FixedDialogueAnalyzer
        self.dialogue_tracker = FixedDialogueTracker(config) if self.dialogue_analysis_enabled else None
        self.dialogue_analyzer = FixedDialogueAnalyzer(config) if self.dialogue_analysis_enabled else None
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.user_contexts: Dict[int, 'UserContext'] = {}
        self.analysis_cache: Dict[str, 'AIAnalysisResult'] = {}
        self.processed_leads: Dict[int, datetime] = {}
        
        # –ù–û–í–û–ï: –¢—Ä–µ–∫–∏–Ω–≥ –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.last_dialogue_analysis: Dict[str, datetime] = {}
        self.dialogue_analysis_pending: Dict[str, bool] = {}
        
        logger.info(f"–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô IntegratedAIContextParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  - –ö–∞–Ω–∞–ª–æ–≤: {len(self.channels)}")
        logger.info(f"  - –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {self.dialogue_analysis_enabled}")
        logger.info(f"  - –£–º–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {self.dialogue_analysis_triggers}")
        logger.info(f"  - –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.min_confidence_score}%")

    def _parse_channels(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        channels_raw = self.parsing_config.get('channels', [])
        if isinstance(channels_raw, list):
            return [str(ch) for ch in channels_raw]
        elif isinstance(channels_raw, (str, int)):
            return [str(channels_raw)]
        return []

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not self.enabled:
                logger.info("‚ùå AI –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
                return
            
            chat_id = update.effective_chat.id
            user = update.effective_user
            message = update.message
            
            if not user or not message or not message.text:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞")
                return
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            logger.info(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
            logger.info(f"    üí¨ –¢–µ–∫—Å—Ç: '{message.text[:50]}...'")
            logger.info(f"    üìç –ö–∞–Ω–∞–ª: {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
            if not self.is_channel_monitored(chat_id, update.effective_chat.username):
                logger.info("‚è≠Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –ª–æ–≥–∏–∫–∏
            dialogue_processed = False
            individual_processed = False
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä–æ–±—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.dialogue_analysis_enabled and self.dialogue_tracker:
                dialogue_id = await self.dialogue_tracker.process_message(update, context)
                
                if dialogue_id:
                    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –¥–∏–∞–ª–æ–≥–µ: {dialogue_id}")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                    should_analyze = await self._should_analyze_dialogue_now(dialogue_id)
                    
                    if should_analyze:
                        logger.info(f"üî• –¢–†–ò–ì–ì–ï–† –°–†–ê–ë–û–¢–ê–õ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
                        await self._analyze_dialogue_immediately(dialogue_id, context)
                        dialogue_processed = True
                    else:
                        logger.info(f"‚è≥ –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò–°–ü–†–ê–í–õ–ï–ù–û - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –∞ –Ω–µ –∑–∞–º–µ–Ω–∞
            # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if not dialogue_processed or not self.prefer_dialogue_analysis:
                logger.info("üë§ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await self._process_individual_message(update, context)
                individual_processed = True
            else:
                logger.info("üë• –î–∏–∞–ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
            # –ù–û–í–û–ï: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            asyncio.create_task(self._periodic_dialogue_check(context))
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º AI –ø–∞—Ä—Å–µ—Ä–µ: {e}")
            import traceback
            traceback.print_exc()

    async def _should_analyze_dialogue_now(self, dialogue_id: str) -> bool:
        """–ù–û–í–û–ï: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            if dialogue_id not in self.dialogue_tracker.active_dialogues:
                return False
            
            dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
            triggers = self.dialogue_analysis_triggers
            
            # –¢—Ä–∏–≥–≥–µ—Ä 1: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(dialogue.messages) >= triggers['message_count']:
                logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π ({len(dialogue.messages)} >= {triggers['message_count']})")
                return True
            
            # –¢—Ä–∏–≥–≥–µ—Ä 2: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if len(dialogue.participants) >= triggers['participant_count']:
                logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({len(dialogue.participants)} >= {triggers['participant_count']})")
                return True
            
            # –¢—Ä–∏–≥–≥–µ—Ä 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            total_buying_signals = sum(p.buying_signals_count for p in dialogue.participants.values())
            if total_buying_signals >= triggers['buying_signals']:
                logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã ({total_buying_signals} >= {triggers['buying_signals']})")
                return True
            
            # –¢—Ä–∏–≥–≥–µ—Ä 4: –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            last_analysis = self.last_dialogue_analysis.get(dialogue_id)
            if last_analysis:
                time_since_analysis = (datetime.now() - last_analysis).total_seconds()
                if time_since_analysis >= triggers['time_window']:
                    logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ({time_since_analysis}s >= {triggers['time_window']}s)")
                    return True
            else:
                # –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ - –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ 2+ —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(dialogue.messages) >= 2:
                    logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å {len(dialogue.messages)} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
                    return True
            
            # –¢—Ä–∏–≥–≥–µ—Ä 5: –°–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é
            urgent_messages = [msg for msg in dialogue.messages[-3:] if msg.urgency_level in ['immediate', 'high']]
            if urgent_messages:
                logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä: —Å—Ä–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(urgent_messages)})")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {e}")
            return False

    async def _analyze_dialogue_immediately(self, dialogue_id: str, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–û–ï: –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        try:
            if dialogue_id not in self.dialogue_tracker.active_dialogues:
                logger.warning(f"–î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ
            if self.dialogue_analysis_pending.get(dialogue_id, False):
                logger.info(f"–î–∏–∞–ª–æ–≥ {dialogue_id} —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            self.dialogue_analysis_pending[dialogue_id] = True
            dialogue = self.dialogue_tracker.active_dialogues[dialogue_id]
            
            logger.info(f"üî• –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {dialogue_id}")
            logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(dialogue.participants)}")
            logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {len(dialogue.messages)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
            analysis_result = await self.dialogue_analyzer.analyze_dialogue(dialogue)
            
            if analysis_result:
                self.last_dialogue_analysis[dialogue_id] = datetime.now()
                
                if analysis_result.is_valuable_dialogue:
                    logger.info(f"üíé –¶–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {dialogue_id}")
                    await self._process_dialogue_analysis_result(dialogue, analysis_result, context)
                else:
                    logger.info(f"üìä –î–∏–∞–ª–æ–≥ {dialogue_id} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —Ü–µ–Ω–Ω—ã–π (score: {analysis_result.confidence_score})")
            else:
                logger.warning(f"‚ùå –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id} –Ω–µ —É–¥–∞–ª—Å—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
        finally:
            self.dialogue_analysis_pending[dialogue_id] = False

    async def _periodic_dialogue_check(self, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–û–ï: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            if not self.dialogue_tracker:
                return
            
            active_dialogues = list(self.dialogue_tracker.active_dialogues.keys())
            
            for dialogue_id in active_dialogues:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
                    if await self._should_analyze_dialogue_now(dialogue_id):
                        await self._analyze_dialogue_immediately(dialogue_id, context)
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏–∞–ª–æ–≥–∞ {dialogue_id}: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

    async def _process_individual_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)"""
        try:
            user = update.effective_user
            message = update.message
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._update_user_context(user, message, update.effective_chat)
            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            user_context = self.user_contexts.get(user.id)
            if not user_context:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            logger.info(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(user_context.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É
            if not self._should_analyze_user_immediately(user_context):
                logger.info(f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ
            if self._was_recently_analyzed(user.id):
                logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ–¥–∞–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
                return
            
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑
            analysis = await self._analyze_user_context(user_context)
            
            if analysis:
                logger.info(f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
                logger.info(f"    üéØ –õ–∏–¥: {analysis.is_lead}")
                logger.info(f"    üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence_score}%")
                logger.info(f"    üî• –ö–∞—á–µ—Å—Ç–≤–æ: {analysis.lead_quality}")
                
                if analysis.is_lead and analysis.confidence_score >= self.min_confidence_score:
                    logger.info("üéØ –°–û–ó–î–ê–ï–ú –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –õ–ò–î–ê –ù–ï–ú–ï–î–õ–ï–ù–ù–û!")
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏–¥
                    await self._create_lead_from_individual_analysis(user_context, analysis, context)
                    
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
                    self.processed_leads[user.id] = datetime.now()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
                    await self._update_channel_stats(str(update.effective_chat.id), 
                                                   message.message_id, True)
                else:
                    logger.info(f"‚ùå –ù–µ –ª–∏–¥: score={analysis.confidence_score}, min={self.min_confidence_score}")
                    await self._update_channel_stats(str(update.effective_chat.id), 
                                                   message.message_id, False)
            else:
                logger.warning("‚ùå –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                await self._update_channel_stats(str(update.effective_chat.id), 
                                               message.message_id, False)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def _should_analyze_user_immediately(self, user_context) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–Ω–∞–ª–∏–∑—É"""
        messages_count = len(user_context.messages)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π = 1
        if messages_count < self.min_messages_for_analysis:
            logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count} < {self.min_messages_for_analysis}")
            return False
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –ª—é–±—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        if messages_count == 1:
            first_message = user_context.messages[0]['text'].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª—é–±—ã–µ –¥–µ–ª–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ)
            if self._has_any_business_signals(first_message):
                logger.info(f"üî• –î–ï–õ–û–í–´–ï –°–ò–ì–ù–ê–õ–´ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
                return True
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            time_since_last = datetime.now() - user_context.last_activity
            if time_since_last > timedelta(seconds=10):  # –ë–´–õ–û: 2 –º–∏–Ω—É—Ç—ã, –°–¢–ê–õ–û: 10 —Å–µ–∫—É–Ω–¥
                logger.info(f"‚úÖ –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {time_since_last}")
                return True
            
            logger.info(f"‚è≥ –ñ–¥–µ–º –µ—â–µ: {time_since_last} < 10 —Å–µ–∫")
            return False
        
        # –î–ª—è 2+ —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if messages_count >= 2:
            logger.info(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {messages_count}")
            return True
        
        return False

    def _has_any_business_signals(self, text: str) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª—é–±—ã–µ –¥–µ–ª–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ)"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        business_signals = [
            # –ü—Ä—è–º—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '—Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å', '–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å',
            '–Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å', '–ø–ª–∞–Ω–∏—Ä—É—é –∫—É–ø–∏—Ç—å', '—Å–æ–±–∏—Ä–∞—é—Å—å –∫—É–ø–∏—Ç—å',
            '–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω–∞', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–∏—â—É',
            
            # –¶–µ–Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫–∞—è —Ü–µ–Ω–∞', '–∫–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞ –∑–∞',
            '—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥', '–ø—Ä–∞–π—Å', '—Ä–∞—Å—Ü–µ–Ω–∫–∏', '—Ç–∞—Ä–∏—Ñ',
            
            # –ù–∞—à–∏ —É—Å–ª—É–≥–∏
            '–∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞', '—Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–∞', '—Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞',
            '–Ω—É–∂–µ–Ω –±–æ—Ç', 'telegram bot', '—Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç',
            '–Ω—É–∂–Ω–∞ crm', '–∑–∞–∫–∞–∑–∞—Ç—å crm', 'crm —Å–∏—Å—Ç–µ–º–∞',
            '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
            
            # –î–µ–ª–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
            '–æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', '–æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è', '–æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
            '—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '—Ç–∑', '–±—Ä–∏—Ñ',
            
            # –°—Ä–æ—á–Ω–æ—Å—Ç—å
            '—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ',
            
            # –í–æ–ø—Ä–æ—Å—ã
            '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç', '–∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            '–º–æ–∂–µ—Ç–µ –ª–∏', '—É–º–µ–µ—Ç–µ –ª–∏', '–¥–µ–ª–∞–µ—Ç–µ –ª–∏'
        ]
        
        text_lower = text.lower()
        for signal in business_signals:
            if signal in text_lower:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–ª–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª: '{signal}'")
                return True
        
        return False

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    # (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        status = {
            'enabled': self.enabled,
            'channels_count': len(self.channels),
            'channels': self.channels,
            'min_confidence_score': self.min_confidence_score,
            'individual_active_users': len(self.user_contexts),
            'individual_analysis_cache_size': len(self.analysis_cache),
            'individual_processed_leads_count': len(self.processed_leads),
            'dialogue_analysis_enabled': self.dialogue_analysis_enabled,
            'prefer_dialogue_analysis': self.prefer_dialogue_analysis,
            'dialogue_analysis_triggers': self.dialogue_analysis_triggers,
            'last_dialogue_analysis_count': len(self.last_dialogue_analysis),
            'pending_dialogue_analysis_count': sum(self.dialogue_analysis_pending.values())
        }
        
        if self.dialogue_tracker:
            status['dialogue_tracker'] = {
                'active_dialogues': len(self.dialogue_tracker.active_dialogues),
                'min_participants': getattr(self.dialogue_tracker, 'min_participants', 2),
                'min_messages': getattr(self.dialogue_tracker, 'min_messages', 3),
            }
        
        return status

# Alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
AIContextParser = IntegratedAIContextParser