"""
handlers/enhanced_admin.py - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from database.operations import (
    get_users, get_leads, get_active_channels, 
    create_or_update_channel, get_bot_stats, get_setting, set_setting
)
from database.dialogue_migration import (
    get_dialogue_stats, get_active_dialogues, export_dialogue_data, cleanup_old_dialogues
)
from database.models import ParsedChannel, Broadcast

logger = logging.getLogger(__name__)

class EnhancedAdminHandler:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.admin_ids = config.get('bot', {}).get('admin_ids', [])
        
        # Callback handler - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.callback_handler = CallbackQueryHandler(
            self.handle_admin_callback,
            pattern=r'^admin_'
        )

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids

    async def _admin_required(self, update: Update) -> bool:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        if not self._is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False
        return True

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self._admin_required(update):
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton("üéØ –õ–∏–¥—ã", callback_data="admin_leads")
            ],
            [
                InlineKeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="admin_dialogues"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status")
            ],
            [
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton("üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports"),
                InlineKeyboardButton("üîß –£—Ç–∏–ª–∏—Ç—ã", callback_data="admin_utilities")
            ]
        ]
        
        await update.message.reply_text(
            "üîß <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
            "üÜï –¢–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def dialogue_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self._admin_required(update):
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            stats_7d = await get_dialogue_stats(7)
            stats_30d = await get_dialogue_stats(30)
            
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤</b>\n\n"
            
            message += "üìÖ <b>–ó–∞ 7 –¥–Ω–µ–π:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('total_dialogues', 0)}\n"
            message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats_7d.get('completed_dialogues', 0)}\n"
            message += f"‚Ä¢ –ë–∏–∑–Ω–µ—Å-–¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('business_dialogues', 0)}\n"
            message += f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats_7d.get('total_analyses', 0)}\n"
            message += f"‚Ä¢ –¶–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('valuable_dialogues', 0)}\n"
            message += f"‚Ä¢ –õ–∏–¥–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('total_leads_from_dialogues', 0)}\n\n"
            
            message += "üìÖ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats_30d.get('total_dialogues', 0)}\n"
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats_30d.get('avg_participants', 0):.1f}\n"
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats_30d.get('avg_messages', 0):.1f}\n"
            message += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats_30d.get('avg_confidence', 0):.1f}%\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if stats_7d.get('total_dialogues', 0) > 0:
                business_rate = (stats_7d.get('business_dialogues', 0) / stats_7d.get('total_dialogues', 1)) * 100
                valuable_rate = (stats_7d.get('valuable_dialogues', 0) / stats_7d.get('business_dialogues', 1)) * 100
                
                message += f"\nüìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (7 –¥–Ω–µ–π):</b>\n"
                message += f"‚Ä¢ –ë–∏–∑–Ω–µ—Å-–¥–∏–∞–ª–æ–≥–∏: {business_rate:.1f}%\n"
                message += f"‚Ä¢ –¶–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –±–∏–∑–Ω–µ—Å-–¥–∏–∞–ª–æ–≥–æ–≤: {valuable_rate:.1f}%\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")

    async def active_dialogues_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self._admin_required(update):
            return
        
        try:
            active_dialogues = await get_active_dialogues()
            
            if not active_dialogues:
                await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç")
                return
            
            message = f"üí¨ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ({len(active_dialogues)})</b>\n\n"
            
            for i, dialogue in enumerate(active_dialogues[:10], 1):
                dialogue_id = dialogue[0]
                channel_title = dialogue[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                participants = dialogue[2]
                messages = dialogue[3]
                start_time = datetime.fromisoformat(dialogue[4]) if dialogue[4] else None
                last_activity = datetime.fromisoformat(dialogue[5]) if dialogue[5] else None
                is_business = dialogue[6]
                
                if start_time:
                    duration = (datetime.now() - start_time).total_seconds() / 60
                    duration_text = f"{duration:.0f} –º–∏–Ω"
                else:
                    duration_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                business_emoji = "üè¢" if is_business else "üí¨"
                
                message += f"{i}. {business_emoji} <b>{dialogue_id[:20]}...</b>\n"
                message += f"   üì∫ {channel_title}\n"
                message += f"   üë• {participants} —É—á–∞—Å—Ç. ‚Ä¢ üí¨ {messages} —Å–æ–æ–±—â.\n"
                message += f"   ‚è±Ô∏è {duration_text}\n\n"
            
            if len(active_dialogues) > 10:
                message += f"... –∏ –µ—â–µ {len(active_dialogues) - 10} –¥–∏–∞–ª–æ–≥–æ–≤\n"
            
            message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /export_dialogue <id> –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")

    async def export_dialogue_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞"""
        if not await self._admin_required(update):
            return
        
        if not context.args:
            await update.message.reply_text(
                "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/export_dialogue dialogue_id</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/export_dialogue dialogue_123456_20241120_143052</code>",
                parse_mode='HTML'
            )
            return
        
        dialogue_id = context.args[0]
        
        try:
            dialogue_data = await export_dialogue_data(dialogue_id)
            
            if not dialogue_data:
                await update.message.reply_text(f"‚ùå –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            dialogue = dialogue_data['dialogue']
            participants = dialogue_data['participants']
            messages = dialogue_data['messages']
            analyses = dialogue_data['analyses']
            
            report = f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
            report += f"üÜî <b>ID:</b> <code>{dialogue_id}</code>\n"
            report += f"üì∫ <b>–ö–∞–Ω–∞–ª:</b> {dialogue[2] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            report += f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(participants)}\n"
            report += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {len(messages)}\n"
            report += f"üìä <b>–ê–Ω–∞–ª–∏–∑–æ–≤:</b> {len(analyses)}\n"
            
            if dialogue[4]:  # start_time
                start_time = datetime.fromisoformat(dialogue[4])
                report += f"‚è∞ <b>–ù–∞—á–∞–ª–æ:</b> {start_time.strftime('%d.%m.%Y %H:%M')}\n"
            
            if dialogue[6]:  # last_activity
                last_activity = datetime.fromisoformat(dialogue[6])
                report += f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_activity.strftime('%d.%m.%Y %H:%M')}\n"
            
            if dialogue[9]:  # is_business_related
                report += f"üè¢ <b>–ë–∏–∑–Ω–µ—Å-—Ç–µ–º–∞:</b> ‚úÖ\n"
            
            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
            if participants:
                report += f"\nüë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n"
                for participant in participants[:5]:
                    name = participant[3] or "–ê–Ω–æ–Ω–∏–º"
                    username = f"@{participant[2]}" if participant[2] else "–±–µ–∑ username"
                    role = participant[5] or "—É—á–∞—Å—Ç–Ω–∏–∫"
                    messages_count = participant[6] or 0
                    lead_prob = participant[13] or 0
                    
                    report += f"‚Ä¢ {name} ({username}) - {role}\n"
                    report += f"  üí¨ {messages_count} —Å–æ–æ–±—â. ‚Ä¢ üéØ {lead_prob:.0f}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∏–¥–∞\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã
            if analyses:
                latest_analysis = analyses[0]
                report += f"\nüîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:</b>\n"
                report += f"‚Ä¢ –¶–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥: {'‚úÖ' if latest_analysis[2] else '‚ùå'}\n"
                report += f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {latest_analysis[3] or 0}%\n"
                report += f"‚Ä¢ –ë–∏–∑–Ω–µ—Å-—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {latest_analysis[4] or 0}%\n"
                report += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ª–∏–¥–æ–≤: {latest_analysis[5] or 0}\n"
                
                if latest_analysis[7]:  # dialogue_summary
                    summary = latest_analysis[7][:200] + "..." if len(latest_analysis[7]) > 200 else latest_analysis[7]
                    report += f"‚Ä¢ –°—É—Ç—å: <i>{summary}</i>\n"
            
            await update.message.reply_text(report, parse_mode='HTML')
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON", callback_data=f"export_json_{dialogue_id}"),
                    InlineKeyboardButton("üë• –î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"export_participants_{dialogue_id}")
                ]
            ]
            
            await update.message.reply_text(
                "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")

    async def cleanup_dialogues_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not await self._admin_required(update):
            return
        
        try:
            days = 30
            if context.args:
                try:
                    days = int(context.args[0])
                except ValueError:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                    return
            
            await cleanup_old_dialogues(days)
            await update.message.reply_text(
                f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
                f"–£–¥–∞–ª–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

    async def ai_health_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI —Å–∏—Å—Ç–µ–º—ã"""
        if not await self._admin_required(update):
            return
        
        try:
            from ai.claude_client import get_claude_client
            
            message = "ü§ñ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Claude –∫–ª–∏–µ–Ω—Ç–∞
            claude_client = get_claude_client()
            if claude_client:
                claude_health = await claude_client.health_check()
                claude_stats = claude_client.get_usage_stats()
                
                message += f"üß† <b>Claude API:</b>\n"
                message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if claude_health else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
                message += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {claude_stats['model']}\n"
                message += f"‚Ä¢ –†–µ–∂–∏–º: {claude_stats['status']}\n"
                message += f"‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {claude_stats['max_tokens']}\n\n"
            else:
                message += f"üß† <b>Claude API:</b> ‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –ø–∞—Ä—Å–µ—Ä
            ai_parser = context.bot_data.get('ai_parser')
            if ai_parser:
                parser_status = ai_parser.get_status()
                message += f"üîç <b>AI –ü–∞—Ä—Å–µ—Ä:</b>\n"
                message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if parser_status['enabled'] else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
                message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {parser_status['channels_count']}\n"
                
                if parser_status.get('dialogue_analysis_enabled'):
                    dialogue_status = parser_status.get('dialogue_tracker', {})
                    message += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: ‚úÖ\n"
                    message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {dialogue_status.get('active_dialogues', 0)}\n"
                else:
                    message += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: ‚ùå\n"
                
                message += f"‚Ä¢ –ú–∏–Ω. —Å–∫–æ—Ä: {parser_status['min_confidence_score']}%\n"
                message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parser_status['individual_active_users']}\n"
            else:
                message += f"üîç <b>AI –ü–∞—Ä—Å–µ—Ä:</b> ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                stats = await get_bot_stats()
                message += f"\nüíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
                message += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
                message += f"‚Ä¢ –õ–∏–¥–æ–≤: {stats.get('total_leads', 0)}\n"
                message += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
            except Exception as e:
                message += f"\nüíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ‚ùå –û—à–∏–±–∫–∞: {e}\n"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è AI: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        
        if not self._is_admin(query.from_user.id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        data = query.data
        logger.info(f"üîß Enhanced Admin callback –æ—Ç {query.from_user.id}: {data}")
        
        try:
            await query.answer()
            
            if data == "admin_dialogues":
                await self._show_dialogues_callback(query)
            elif data == "admin_ai_status":
                await self._show_ai_status_callback(query)
            elif data == "admin_reports":
                await self._show_reports_callback(query)
            elif data == "admin_utilities":
                await self._show_utilities_callback(query)
            elif data.startswith("export_json_"):
                dialogue_id = data.replace("export_json_", "")
                await self._export_dialogue_json(query, dialogue_id)
            elif data.startswith("export_participants_"):
                dialogue_id = data.replace("export_participants_", "")
                await self._export_participants_details(query, dialogue_id)
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ callback –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ AdminHandler
            elif data == "admin_panel":
                await self._show_admin_panel(query)
            elif data == "admin_users":
                await self._show_users_callback(query)
            elif data == "admin_leads":
                await self._show_leads_callback(query)
            elif data == "admin_channels":
                await self._show_channels_callback(query)
            elif data == "admin_stats":
                await self._show_stats_callback(query)
            elif data == "admin_broadcast":
                await self._show_broadcast_info(query)
            elif data == "admin_settings":
                await self._show_settings_callback(query)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ enhanced admin callback '{data}': {e}")
            import traceback
            traceback.print_exc()
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

    async def _show_dialogues_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ —á–µ—Ä–µ–∑ callback"""
        try:
            active_dialogues = await get_active_dialogues()
            stats_7d = await get_dialogue_stats(7)
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            message = f"üí¨ <b>–î–∏–∞–ª–æ–≥–∏</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})\n\n"
            
            message += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('total_dialogues', 0)}\n"
            message += f"‚Ä¢ –ë–∏–∑–Ω–µ—Å-–¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('business_dialogues', 0)}\n"
            message += f"‚Ä¢ –¶–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('valuable_dialogues', 0)}\n"
            message += f"‚Ä¢ –õ–∏–¥–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {stats_7d.get('total_leads_from_dialogues', 0)}\n\n"
            
            if active_dialogues:
                message += f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ ({len(active_dialogues)}):</b>\n"
                for dialogue in active_dialogues[:3]:
                    channel_title = dialogue[1] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    participants = dialogue[2]
                    messages = dialogue[3]
                    is_business = "üè¢" if dialogue[6] else "üí¨"
                    
                    message += f"{is_business} {channel_title} - {participants}üë• {messages}üí¨\n"
                
                if len(active_dialogues) > 3:
                    message += f"... –∏ –µ—â–µ {len(active_dialogues) - 3}\n"
            else:
                message += "üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_dialogues"),
                    InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_dialogue_stats")
                ],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–∞–ª–æ–≥–∞—Ö")

    async def _show_ai_status_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å AI —á–µ—Ä–µ–∑ callback"""
        try:
            from ai.claude_client import get_claude_client
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            message = f"ü§ñ <b>AI –°—Ç–∞—Ç—É—Å</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})\n\n"
            
            # Claude API
            claude_client = get_claude_client()
            if claude_client:
                claude_stats = claude_client.get_usage_stats()
                health = await claude_client.health_check()
                
                status_emoji = "‚úÖ" if health else "‚ùå"
                message += f"{status_emoji} <b>Claude API</b>\n"
                message += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {claude_stats['model']}\n"
                message += f"‚Ä¢ –†–µ–∂–∏–º: {claude_stats['status']}\n"
                
                if not health:
                    message += f"‚Ä¢ ‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
            else:
                message += f"‚ùå <b>Claude API</b> - –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
            
            message += f"\nüîç <b>–ü–∞—Ä—Å–∏–Ω–≥:</b>\n"
            message += f"‚Ä¢ –í–∫–ª—é—á–µ–Ω: {'‚úÖ' if self.config.get('parsing', {}).get('enabled') else '‚ùå'}\n"
            message += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(self.config.get('parsing', {}).get('channels', []))}\n"
            message += f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {'‚úÖ' if self.config.get('parsing', {}).get('dialogue_analysis_enabled') else '‚ùå'}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_ai_status"),
                    InlineKeyboardButton("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", callback_data="admin_health_check")
                ],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ AI —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI —Å—Ç–∞—Ç—É—Å–∞")

    async def _show_reports_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã —á–µ—Ä–µ–∑ callback"""
        message = f"üìà <b>–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        message += f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n\n"
        message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        message += f"üë• –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤\n"
        message += f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤\n"
        message += f"üìà –¢—Ä–µ–Ω–¥—ã –∏ –¥–∏–Ω–∞–º–∏–∫–∞\n\n"
        message += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += f"‚Ä¢ <code>/dialogue_stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤\n"
        message += f"‚Ä¢ <code>/stats</code> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        message += f"‚Ä¢ <code>/export_dialogue &lt;id&gt;</code> - —ç–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞"
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤", callback_data="admin_dialogue_stats"),
                InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _show_utilities_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ç–∏–ª–∏—Ç—ã —á–µ—Ä–µ–∑ callback"""
        message = f"üîß <b>–£—Ç–∏–ª–∏—Ç—ã –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b>\n\n"
        message += f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n\n"
        message += f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n"
        message += f"üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã\n"
        message += f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        message += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞\n\n"
        message += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        message += f"‚Ä¢ <code>/cleanup_dialogues [–¥–Ω–∏]</code> - –æ—á–∏—Å—Ç–∫–∞\n"
        message += f"‚Ä¢ <code>/health</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        message += f"‚Ä¢ <code>/status</code> - —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"
        
        keyboard = [
            [
                InlineKeyboardButton("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", callback_data="admin_health_check"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞ (30–¥)", callback_data="admin_cleanup_30")
            ],
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _export_dialogue_json(self, query, dialogue_id: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            dialogue_data = await export_dialogue_data(dialogue_id)
            
            if not dialogue_data:
                await query.edit_message_text(f"‚ùå –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
            json_data = json.dumps(dialogue_data, indent=2, ensure_ascii=False, default=str)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è Telegram
            if len(json_data) > 4000:
                json_preview = json_data[:3900] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
                
                await query.edit_message_text(
                    f"üìã <b>JSON –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
                    f"<pre>{json_preview}</pre>\n\n"
                    f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram",
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text(
                    f"üìã <b>JSON –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
                    f"<pre>{json_data}</pre>",
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

    async def _export_participants_details(self, query, dialogue_id: str):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞"""
        try:
            dialogue_data = await export_dialogue_data(dialogue_id)
            
            if not dialogue_data:
                await query.edit_message_text(f"‚ùå –î–∏–∞–ª–æ–≥ {dialogue_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            participants = dialogue_data['participants']
            
            message = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞</b>\n\n"
            
            for participant in participants:
                name = participant[3] or "–ê–Ω–æ–Ω–∏–º"
                username = f"@{participant[2]}" if participant[2] else "–±–µ–∑ username"
                role = participant[5] or "participant"
                message_count = participant[6] or 0
                engagement = participant[8] or "low"
                buying_signals = participant[9] or 0
                influence_score = participant[10] or 0
                lead_probability = participant[11] or 0
                role_in_decision = participant[12] or "observer"
                
                message += f"üîπ <b>{name}</b> ({username})\n"
                message += f"   üë§ –†–æ–ª—å: {role}\n"
                message += f"   üé≠ –í —Ä–µ—à–µ–Ω–∏–∏: {role_in_decision}\n"
                message += f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                message += f"   üìä –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {engagement}\n"
                message += f"   üí∞ –ü–æ–∫—É–ø. —Å–∏–≥–Ω–∞–ª—ã: {buying_signals}\n"
                message += f"   üí™ –í–ª–∏—è–Ω–∏–µ: {influence_score}/100\n"
                message += f"   üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∏–¥–∞: {lead_probability:.0f}%\n\n"
            
            await query.edit_message_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
    async def _show_admin_panel(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton("üéØ –õ–∏–¥—ã", callback_data="admin_leads")
            ],
            [
                InlineKeyboardButton("üí¨ –î–∏–∞–ª–æ–≥–∏", callback_data="admin_dialogues"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="admin_ai_status")
            ],
            [
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton("üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports"),
                InlineKeyboardButton("üîß –£—Ç–∏–ª–∏—Ç—ã", callback_data="admin_utilities")
            ]
        ]
        
        await query.edit_message_text(
            "üîß <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\nüÜï –¢–µ–ø–µ—Ä—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _show_users_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
        pass

    async def _show_leads_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã —á–µ—Ä–µ–∑ callback (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
        pass

    async def _show_channels_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ callback (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
        pass

    async def _show_stats_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
        pass

    async def _show_broadcast_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
        pass

    async def _show_settings_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ callback (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ AdminHandler
        pass