"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
"""

import asyncio
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from database.operations import (
    get_all_users, get_users_by_interest_score, get_leads_by_score,
    get_recent_leads, get_active_channels, create_or_update_channel,
    get_stats, create_broadcast, update_broadcast_stats, get_setting, set_setting
)
from database.models import ParsedChannel, Broadcast

logger = logging.getLogger(__name__)

class AdminHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, config):
        self.config = config
        self.admin_ids = config.get('bot', {}).get('admin_ids', [])
        
        # Callback handler
        self.callback_handler = CallbackQueryHandler(self.handle_admin_callback)

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids

    async def _admin_required(self, update: Update) -> bool:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        if not self._is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False
        return True

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        if not await self._admin_required(update):
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton("üéØ –õ–∏–¥—ã", callback_data="admin_leads")
            ],
            [
                InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ]
        ]
        
        await update.message.reply_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not await self._admin_required(update):
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Å–∫–æ—Ä–æ–º
            interested_users = await get_users_by_interest_score(min_score=70)
            all_users = await get_all_users(limit=20)
            
            message = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞</b>\n\n"
            
            if interested_users:
                message += "üî• <b>–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (score ‚â• 70):</b>\n"
                for user in interested_users[:10]:
                    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
                    message += f"‚Ä¢ {user.first_name} ({username}) - {user.interest_score}/100\n"
                message += "\n"
            
            message += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(all_users)} –∏–∑ –≤—Å–µ—Ö):</b>\n"
            for user in all_users[:10]:
                username = f"@{user.username}" if user.username else "–±–µ–∑ username"
                activity = user.last_activity.strftime("%d.%m %H:%M") if user.last_activity else "–Ω–∏–∫–æ–≥–¥–∞"
                message += f"‚Ä¢ {user.first_name} ({username}) - {user.interest_score}/100, –∞–∫—Ç–∏–≤–µ–Ω: {activity}\n"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    async def show_leads(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã"""
        if not await self._admin_required(update):
            return
        
        try:
            recent_leads = await get_recent_leads(hours=24)
            all_leads = await get_leads_by_score(min_score=60, limit=20)
            
            message = "üéØ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</b>\n\n"
            
            if recent_leads:
                message += f"üî• <b>–ù–æ–≤—ã–µ –ª–∏–¥—ã –∑–∞ 24 —á–∞—Å–∞ ({len(recent_leads)}):</b>\n"
                for lead in recent_leads[:5]:
                    username = f"@{lead.username}" if lead.username else "–±–µ–∑ username"
                    source = lead.source_channel.replace('@', '')
                    message += f"‚Ä¢ {lead.first_name or '–ê–Ω–æ–Ω–∏–º'} ({username})\n"
                    message += f"  –°–∫–æ—Ä: {lead.interest_score}/100, –∏–∑: {source}\n"
                    message += f"  –°–æ–æ–±—â–µ–Ω–∏–µ: {lead.message_text[:100]}...\n\n"
            
            if all_leads:
                message += f"üìã <b>–í—Å–µ –ª–∏–¥—ã (score ‚â• 60, –ø–æ–∫–∞–∑–∞–Ω–æ {min(len(all_leads), 10)}):</b>\n"
                for lead in all_leads[:10]:
                    username = f"@{lead.username}" if lead.username else "–±–µ–∑ username"
                    created = lead.created_at.strftime("%d.%m %H:%M") if lead.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    message += f"‚Ä¢ {lead.first_name or '–ê–Ω–æ–Ω–∏–º'} ({username}) - {lead.interest_score}/100, {created}\n"
            
            if not recent_leads and not all_leads:
                message += "–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤."
            
            keyboard = [
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    async def manage_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if not await self._admin_required(update):
            return
        
        try:
            channels = await get_active_channels()
            
            message = "üì∫ <b>–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
            
            if channels:
                for channel in channels:
                    status = "‚úÖ" if channel.enabled else "‚ùå"
                    last_parsed = "–Ω–∏–∫–æ–≥–¥–∞"
                    if channel.last_parsed:
                        last_parsed = channel.last_parsed.strftime("%d.%m %H:%M")
                    
                    message += f"{status} <code>{channel.channel_username}</code>\n"
                    message += f"   –°–ø–∞—Ä—Å–µ–Ω–æ: {channel.total_messages_parsed} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    message += f"   –õ–∏–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {channel.leads_found}\n"
                    message += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: {last_parsed}\n\n"
            else:
                message += "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
            
            message += "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
            message += "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ config.yaml –≤ —Å–µ–∫—Ü–∏–∏ parsing.channels\n"
            message += "–ü—Ä–∏–º–µ—Ä: ['@channel1', '@channel2']\n\n"
            message += "–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
            
            keyboard = [
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    async def broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not await self._admin_required(update):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if context.args:
            broadcast_text = " ".join(context.args)
        else:
            await update.message.reply_text(
                "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/broadcast –ù–æ–≤–∞—è –∞–∫—Ü–∏—è! –°–∫–∏–¥–∫–∞ 20%</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await get_all_users(limit=1000)
            
            if not users:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            broadcast = Broadcast(
                admin_id=update.effective_user.id,
                message_text=broadcast_text,
                total_users=len(users),
                status="sending"
            )
            broadcast = await create_broadcast(broadcast)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            await update.message.reply_text(
                f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                f"–¢–µ–∫—Å—Ç: <i>{broadcast_text[:100]}...</i>",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_count = 0
            failed_count = 0
            
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=broadcast_text,
                        parse_mode='HTML'
                    )
                    sent_count += 1
                    
                    # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    if sent_count % 20 == 0:
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    failed_count += 1
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            await update_broadcast_stats(
                broadcast.id, sent_count, failed_count, "completed"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await update.message.reply_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {sent_count/(sent_count+failed_count)*100:.1f}%",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not await self._admin_required(update):
            return
        
        try:
            stats = await get_stats()
            
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            
            message += "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
            message += f"‚Ä¢ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ (score ‚â• 70): {stats.get('interested_users', 0)}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 24—á: {stats.get('active_users_24h', 0)}\n\n"
            
            message += "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_messages', 0)}\n"
            message += f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {stats.get('messages_24h', 0)}\n\n"
            
            message += "üéØ <b>–õ–∏–¥—ã:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_leads', 0)}\n"
            message += f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {stats.get('leads_24h', 0)}\n"
            message += f"‚Ä¢ –ì–æ—Ä—è—á–∏–µ (score ‚â• 80): {stats.get('hot_leads', 0)}\n\n"
            
            message += "üì∫ <b>–ü–∞—Ä—Å–∏–Ω–≥:</b>\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}\n"
            
            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            if stats.get('total_users', 0) > 0:
                conversion = stats.get('interested_users', 0) / stats.get('total_users', 1) * 100
                message += f"\nüìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö:</b> {conversion:.1f}%"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await update.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        if not await self._admin_required(update):
            return
        
        message = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        message += "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ <code>config.yaml</code>\n\n"
        message += "<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n"
        message += "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.yaml\n"
        message += "2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
        message += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏:</b>\n"
        message += "‚Ä¢ <code>bot</code> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        message += "‚Ä¢ <code>claude</code> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI\n"
        message += "‚Ä¢ <code>parsing</code> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
        message += "‚Ä¢ <code>messages</code> - —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        message += "‚Ä¢ <code>prompts</code> - –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Claude\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if not self._is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        data = query.data
        
        try:
            if data == "admin_panel":
                await self._show_admin_panel(query)
            elif data == "admin_users":
                await self._show_users_callback(query)
            elif data == "admin_leads":
                await self._show_leads_callback(query)
            elif data == "admin_channels":
                await self._show_channels_callback(query)
            elif data == "admin_stats":
                await self._show_stats_callback(query)
            elif data == "admin_broadcast":
                await self._show_broadcast_info(query)
            elif data == "admin_settings":
                await self._show_settings_callback(query)
            else:
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin callback: {e}")

    async def _show_admin_panel(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton("üéØ –õ–∏–¥—ã", callback_data="admin_leads")
            ],
            [
                InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ]
        ]
        
        await query.edit_message_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _show_users_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
        try:
            interested_users = await get_users_by_interest_score(min_score=70)
            all_users = await get_all_users(limit=10)
            
            message = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞</b>\n\n"
            
            if interested_users:
                message += f"üî• <b>–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ ({len(interested_users)}):</b>\n"
                for user in interested_users[:5]:
                    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
                    message += f"‚Ä¢ {user.first_name} ({username}) - {user.interest_score}/100\n"
                message += "\n"
            
            message += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user in all_users[:5]:
                username = f"@{user.username}" if user.username else "–±–µ–∑ username"
                message += f"‚Ä¢ {user.first_name} ({username}) - {user.interest_score}/100\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    async def _show_leads_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã —á–µ—Ä–µ–∑ callback"""
        try:
            recent_leads = await get_recent_leads(hours=24)
            
            message = "üéØ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</b>\n\n"
            
            if recent_leads:
                message += f"üî• <b>–ó–∞ 24 —á–∞—Å–∞ –Ω–∞–π–¥–µ–Ω–æ: {len(recent_leads)}</b>\n\n"
                for lead in recent_leads[:3]:
                    username = f"@{lead.username}" if lead.username else "–±–µ–∑ username"
                    message += f"‚Ä¢ {lead.first_name or '–ê–Ω–æ–Ω–∏–º'} ({username})\n"
                    message += f"  –°–∫–æ—Ä: {lead.interest_score}/100\n"
                    message += f"  –ò–∑: {lead.source_channel.replace('@', '')}\n\n"
            else:
                message += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –Ω–µ—Ç.\n\n"
                message += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_leads")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–¥–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    async def _show_channels_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ callback"""
        await self._show_admin_panel(query)  # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É

    async def _show_stats_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback"""
        try:
            stats = await get_stats()
            
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            message += f"üî• –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('interested_users', 0)}\n"
            message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 24—á: {stats.get('messages_24h', 0)}\n"
            message += f"üéØ –õ–∏–¥–æ–≤ –∑–∞ 24—á: {stats.get('leads_24h', 0)}\n"
            message += f"üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def _show_broadcast_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        message = "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        message += "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        message += "<code>/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
        message += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        message += "‚Ä¢ <code>/broadcast –ù–æ–≤–∞—è –∞–∫—Ü–∏—è!</code>\n"
        message += "‚Ä¢ <code>/broadcast –°–∫–∏–¥–∫–∞ 20% –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏</code>\n\n"
        message += "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _show_settings_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ callback"""
        message = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        message += "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ <code>config.yaml</code>\n\n"
        message += "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        message += "‚Ä¢ –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        message += "‚Ä¢ –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è AI\n"
        message += "‚Ä¢ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
        message += "‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        message += "–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
