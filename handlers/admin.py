"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import asyncio
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from database.operations import (
    get_users, get_leads, get_active_channels, 
    create_or_update_channel, get_bot_stats, get_setting, set_setting
)
from database.models import ParsedChannel, Broadcast

logger = logging.getLogger(__name__)

class AdminHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, config):
        self.config = config
        self.admin_ids = config.get('bot', {}).get('admin_ids', [])
        
        # Callback handler - –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback
        self.callback_handler = CallbackQueryHandler(
            self.handle_admin_callback,
            pattern=r'^admin_'  # –¢–æ–ª—å–∫–æ callback –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å admin_
        )

    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in self.admin_ids

    async def _admin_required(self, update: Update) -> bool:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        if not self._is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False
        return True

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        if not await self._admin_required(update):
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton("üéØ –õ–∏–¥—ã", callback_data="admin_leads")
            ],
            [
                InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ]
        ]
        
        await update.message.reply_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not await self._admin_required(update):
            return
        
        try:
            stats = await get_bot_stats()
            
            message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            
            message += "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 24—á: {stats.get('active_users_today', 0)}\n\n"
            
            message += "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_messages', 0)}\n\n"
            
            message += "üéØ <b>–õ–∏–¥—ã:</b>\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_leads', 0)}\n"
            message += f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {stats.get('leads_today', 0)}\n"
            message += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats.get('leads_week', 0)}\n\n"
            
            # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            if stats.get('total_users', 0) > 0:
                conversion = stats.get('total_leads', 0) / stats.get('total_users', 1) * 100
                message += f"üìà <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ª–∏–¥—ã:</b> {conversion:.1f}%"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not await self._admin_required(update):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if context.args:
            broadcast_text = " ".join(context.args)
        else:
            await update.message.reply_text(
                "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/broadcast –ù–æ–≤–∞—è –∞–∫—Ü–∏—è! –°–∫–∏–¥–∫–∞ 20%</code>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await get_users(limit=1000)
            
            if not users:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            await update.message.reply_text(
                f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                f"–¢–µ–∫—Å—Ç: <i>{broadcast_text[:100]}...</i>",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_count = 0
            failed_count = 0
            
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=broadcast_text,
                        parse_mode='HTML'
                    )
                    sent_count += 1
                    
                    # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    if sent_count % 20 == 0:
                        await asyncio.sleep(1)
                        
                except Exception as e:
                    failed_count += 1
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            success_rate = (sent_count/(sent_count+failed_count)*100) if (sent_count+failed_count) > 0 else 0
            await update.message.reply_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        
        if not self._is_admin(query.from_user.id):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        data = query.data
        logger.info(f"üîß Admin callback –æ—Ç {query.from_user.id}: {data}")
        
        try:
            await query.answer()
            
            if data == "admin_panel":
                await self._show_admin_panel(query)
            elif data == "admin_users":
                await self._show_users_callback(query)
            elif data == "admin_leads":
                await self._show_leads_callback(query)
            elif data == "admin_channels":
                await self._show_channels_callback(query)
            elif data == "admin_stats":
                await self._show_stats_callback(query)
            elif data == "admin_broadcast":
                await self._show_broadcast_info(query)
            elif data == "admin_settings":
                await self._show_settings_callback(query)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin callback '{data}': {e}")
            import traceback
            traceback.print_exc()
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

    async def _show_admin_panel(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        keyboard = [
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton("üéØ –õ–∏–¥—ã", callback_data="admin_leads")
            ],
            [
                InlineKeyboardButton("üì∫ –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ]
        ]
        
        await query.edit_message_text(
            "üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _show_users_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
        try:
            users = await get_users(limit=10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            message = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})\n\n"
            
            if users:
                message += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n"
                for user in users[:5]:
                    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
                    activity = user.last_activity.strftime("%d.%m %H:%M") if user.last_activity else "–Ω–∏–∫–æ–≥–¥–∞"
                    message += f"‚Ä¢ {user.first_name} ({username}) - –∞–∫—Ç–∏–≤–µ–Ω: {activity}\n"
            else:
                message += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")

    async def _show_leads_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥—ã —á–µ—Ä–µ–∑ callback"""
        try:
            leads = await get_leads(limit=10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            message = f"üéØ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})\n\n"
            
            if leads:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–∏–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                recent_leads = [
                    lead for lead in leads 
                    if lead.created_at and (datetime.now() - lead.created_at).days == 0
                ]
                
                message += f"üî• <b>–ó–∞ 24 —á–∞—Å–∞ –Ω–∞–π–¥–µ–Ω–æ: {len(recent_leads)}</b>\n\n"
                
                for lead in leads[:3]:
                    username = f"@{lead.username}" if lead.username else "–±–µ–∑ username"
                    message += f"‚Ä¢ {lead.first_name or '–ê–Ω–æ–Ω–∏–º'} ({username})\n"
                    message += f"  –°–∫–æ—Ä: {lead.interest_score}/100\n"
                    if lead.source_channel:
                        message += f"  –ò–∑: {lead.source_channel.replace('@', '')}\n\n"
            else:
                message += "–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
                message += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_leads")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–¥–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–¥–∞—Ö")

    async def _show_channels_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ callback"""
        try:
            channels = await get_active_channels()
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            message = f"üì∫ <b>–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})\n\n"
            
            if channels:
                for channel in channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    status = "‚úÖ" if channel.enabled else "‚ùå"
                    message += f"{status} <code>{channel.channel_username}</code>\n"
                    message += f"   üìÑ {channel.total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, üéØ {channel.leads_found} –ª–∏–¥–æ–≤\n"
                
                if len(channels) > 5:
                    message += f"\n... –∏ –µ—â–µ {len(channels) - 5} –∫–∞–Ω–∞–ª–æ–≤"
            else:
                message += "–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã."
            
            message += f"\n\nüìä <b>–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>\n"
            message += f"‚Ä¢ {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.config.get('parsing', {}).get('enabled') else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
            message += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.config.get('parsing', {}).get('parse_interval', 3600)} —Å–µ–∫"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_channels")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö")

    async def _show_stats_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback"""
        try:
            stats = await get_bot_stats()
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            message = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {timestamp})\n\n"
            message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
            message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
            message += f"üéØ –õ–∏–¥–æ–≤: {stats.get('total_leads', 0)}\n"
            message += f"üî• –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('leads_today', 0)}\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
            ]
            
            await query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def _show_broadcast_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        message = "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        message += "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        message += "<code>/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
        message += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        message += "‚Ä¢ <code>/broadcast –ù–æ–≤–∞—è –∞–∫—Ü–∏—è!</code>\n"
        message += "‚Ä¢ <code>/broadcast –°–∫–∏–¥–∫–∞ 20% –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏</code>\n\n"
        message += "‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    async def _show_settings_callback(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ callback"""
        message = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Claude API
        from ai.claude_client import get_claude_client
        claude_client = get_claude_client()
        if claude_client:
            stats = claude_client.get_usage_stats()
            message += f"ü§ñ Claude: {'‚úÖ' if stats['api_available'] else '‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º'}\n"
        else:
            message += "ü§ñ Claude: ‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
        
        message += f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(self.admin_ids)}\n"
        message += f"üì∫ –ü–∞—Ä—Å–∏–Ω–≥: {'‚úÖ' if self.config.get('parsing', {}).get('enabled') else '‚ùå'}\n"
        message += f"üí¨ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: {'‚úÖ' if self.config.get('features', {}).get('auto_response') else '‚ùå'}\n"
        
        message += "\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ <code>.env</code> –∏ <code>config.yaml</code>"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )